FORMAT: 1A

# BDDPe
Provides the editorial data

- TODO : provide search and filtering and pagination in lists
- TODO : REST filtering
- TODO : url path media : remove and add url instead
- TODO : members changer order en rank

## Security
Access is controlled using a security token. The token can be passed using `Session-Token` HTTP Header.

## Date
All dates are represented by [ISO_8601](http://en.wikipedia.org/wiki/ISO_8601)

## Country 
All countries codes are represented by [ISO_3166-1](http://www.iso.org/iso/country_codes.htm)

## Authentication
Currently the API provides only a basic http authentication. Please refer to the config file of the Data API to retrieve a valid account.

## Basic usage
This API is RESTfull and uses the following methods as described:

| Method | Usage                                 |
| ------ | ------------------------------------- |
| POST   | To create a resource                  |
| GET    | Get a resource or a list of resources |
| PUT    | To update a resource                  |
| DELETE | To delete resource                    |

## Description Of Usual Server Responses
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used for API responses.

Successful GET and PUT request will return `200` status code.

Successful POST request will return `201` status code, with a header `Location` to the new ressource

Successful DELETE request will return `204`status code.

Error messages will use `4xx` status codes and will provide a description of the error.
- 404 : Missing Page
- 403 : Forbidden
- 406 : Miss a required field
- 400 : Bad Data

```
HTTP Status Code: 403
{"message":"Param Update Forbidden","code": 20003}
```

In which case do we have a 404 or 204
- 404 are returned when the id is not found for example when calling `/api/contents/2` if no content with the id 2 is found.
- 204 are returned when the main id is found but there is no data for this action. For example calling `/api/contents/2/media` will return a 204 if no media are linked with the content. In this case the content 2 exists.

## Caching
API is compatible with Entity Tag `ETAG` and the request header `If-Modified-Since`

## Pagination
All GET requests on collection of objects can use pagination. You can add `page` and `limit` parameters to the query string to retrieve specific content by using the pager. For example:
> ?page=2&limit=10

Here are the parameters you'll retrieve in a paginated response:

| Properties                            | Links                         | Embedded relations                    |
|---------------------------------------|-------------------------------|---------------------------------------|
| *page*: The current page of the pager | *self*: Current pager         | *data*: List of items in the pager |
| *limit*: Number of elements per page  | *prev*: Previous page         |                                       |
| *pages*: Total number of pages        | *next*: Next page             |                                       |
| *total*: Total number of elements     | *first*: First page of pager  |                                       |
|                                       | *last*: Last page             |                                       |

Default values are page = ``, limit = 10`

## Content structure
Return the list of content

### Localisation
-------------------------------

The API is HTTP Accept-Language header aware. If not given french content will be retuned.
In case of multiple accepted language the response structure will be adapted.

### CSA Ratings
-------------------------------

TODO
Here is the mapping of the CSA code :

- 1
- 2
- 3
- 4


### Global structure
-------------------------------

Here is a mapping between ATG getContent response field, BDDPE XML web services and the current operation mapping.
In order to minimize the number of field present in response some ATG Field had been replaced like `showTitle` that is now `titles.title`

Type availability | Description
----------------- | -----------
E                 | episode
P                 | program
M                 | movie
C                 | collection
S                 | show
F                 | person (figure)


Mapping between ATG output and BDDP Xml service :


REST Name  | REST Availability  | ATG Name          | ATG availability| Bddpe XML Name
:----------------:| ---------------- | -------------- | :--------: | -----------------
 itemType | E,P,M,S,C,F|itemType  |  E,P,M,S,C|programme.type
 id | E,P,M,S,C,F|id  | E,P,M|programme.identifiant
 titles.title | E,P,M,S,C|title  | E,P,M| programme.titre
titles.subTitle | E,P,M,S,C|-|-|programme.listetitres.SOUS_TITRE_LABELLISE_PART1
 titles.originalTtitle | E,P,M,S|-|-|programme.titreoriginal
titles.epgTitle | E,P,M,S,C|-|-|programme.listetitres.TITRE_EPG
 accroche | E,P,M,S,C|accroche  | E,P,M| programme.listedescriptifs.TXTCOURT
 longAccroche | E,P,M,S,C|longAccroche  | E| programme.listedescriptifs.TXTLONG
 creationDate | E,P,M,S,C|~~creationDate~~  | E,P,M| programme.datepremierediffusionlive
 tagsByType | E,P,M,S,C|tags | E,P,M|listegenres, listethematiques, listeinformationscomplementaires
 synopsis | E,P,M,S,C|synopsis  | E,P,M|programme.listedescriptifs.RESUMECOURT
isColor|E,P,M,C,S|-|-|programme.couleur
mediumSynopsis | E,P,M,S,C|-|-|programme.listedescriptifs.RESUMEMOYEN
 longSynopsis| E,P,M,S,C|longSynopsis  | E,P,M|programme.listedescriptifs.RESUMELONG
productionNationality| E,P,M,S|productionNationality  | E,P,M|programme.nationalite
productionYear| E,P,M,S|productionYear  | E,P,M|programme.annee
[members](#level-1-member)| E,P,M|members | E,M|listepersonnes
 -| -|showTitle  | P|listepacks.libelle
 num| E,P,M|numEpisode  | E|programme.episode
 updateDate| E,P,M,S,C|publicationDate  | E|programme.datemaj
 parentId| E,P,M,S,C|parentId | E| listepacks.identifiant
 [partners](#level-1-partners)| E,P,M,S|comments|-|listeinformationscomplementaires.PARTENAIRES
 [medias](#level-1-media)| E,P,M,S,C|-|-|listemedia
 [person](#level-1-person)| F|-|-|-
 [subobjects](#level-1-subject)| S,C|-|-|-
 [awards](#level-1-awards)| E,P,M,S,C|-|-|-
 version | E,P,M,S,C|-|-|-

<a id="level-1-media"></a>
### Media structure
-------------------------------

This section describe the mapping of members entries. Each member are stored under their function. The liste is also ordored using the function natural rank, and member rank.

ATG Name          | ATG availability | Bddpe XML Name | REST Name
:----------------:| ---------------- | -------------- | :--------:
-|-|media.type|type
-|-|media.hauteur|height
-|-|media.largeur|width
-|-|media.format|format
-|-|media.nom|name
-|-|media.type|imgType
-|-|media.copyright|copyright
-|-|media.rang| rank
-|-|media.identifiant| id
-|-|media.datemaj|updateDate
-|picture|-|path
Example :

```json
{
    "type": "media_image",
    "height": 270,
    "width": 480,
    "format": "image/jpeg",
    "name": "169_48012.jpg",
    "imgType": "STD169",
    "copyright": "Skull Distribution",
    "rank": 1,
    "id": 40420,
    "updateDate": "2013-12-26T08:05:32Z",
    "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
}
```

<a id="level-1-member"></a>
### Member structure
-------------------------------


This section describe the mapping of members entries. Each member are stored under their function. The liste is also ordored using the function natural rank, and member rank.

ATG Name          | ATG availability | Bddpe XML Name | REST Name  |
:----------------:| ---------------- | -------------- | :--------: |
function|E,P,M|listepersonnes.personnes.fonction|function
prefix|E,P,M|listepersonnes.prefix|prefix
rank|E,P,M|listepersonnes.personnes.rang|rank
lastName |E,P,M|listepersonnes.personnes.nom|persons[].lastName
firstName|E,P,M|listepersonnes.personnes.prenom|persons[].firstName
rank|E,P,M|listepersonnes.personnes.rang|persons[].rank
id|E,P,M|listepersonnes.personnes.identifiant|persons[].id
-|-|-|persons[].awards

Example :

```json
"members": {
      "2": {
        "id": 2,
        "function": "Acteur",
        "rank": 12,
        "prefix": "Avec : ",
        "persons": [
          {
            "lastName": "Reeves",
            "firstName": "Keanu",
            "rank": 1,
            "id": 21123,
            "awards": [
              {
                "festivalId": 10,
                "festivalName": "Oscars",
                "festivalCountry": "Etats-Unis",
                "festivalCountryCode" : "US",
                "festivalPlace": null,
                "year": 2012,
                "awardId": 8,
                "awardName": "Oscar du meilleur acteur",
                "order": 8
              }
          }
        ]
      },
      "4": {
        "id": 4,
        "function": "Réalisateur",
        "rank": 1,
        "prefix": "De : ",
        "persons": [
          {
            "lastName": "Wachowski",
            "firstName": "Andy",
            "rank": 1,
            "id": 25198
          }
        ]
      }
```

<a id="level-1-partners"></a>
### Partners structure
-------------------------------

This section describe the structure of partner entries which group partner opinions. Historically these data were stored under the `informationcomplementaire` of XML.

ATG Name          | ATG availability | Bddpe XML Name | REST Name  |
:----------------:| ---------------- | -------------- | :--------: |
-|-|nompartenaire| name
-|-|identifiant|id
-|-|nomnote|opinions[].type
-|-|note|opinions[].rating
-|-|recommende|opinions[].recommended

Example :

```json
"partners": {
    "20": {
    "name": "Allociné",
    "id": 20,
    "opinions": [
        {
        "type": null,
        "rating": 3.5,
        "name": null,
        "recommended": false,
        "opinion": null
        }
    ]
}

```
<a id="level-1-awards"></a>
### Awards structure
-------------------------------

This section describe the structure of awards entries.

ATG Name          | ATG availability | Bddpe XML Name | REST Name  |
:----------------:| ---------------- | -------------- | :--------: |
-|-|-|opinions[].festivalId
-|-|-|opinions[].festivalName
-|-|-|opinions[].festivalCountry
-|-|-|opinions[].festivalPlace
-|-|-|opinions[].year
-|-|-|opinions[].awardId
-|-|-|opinions[].awardName
-|-|-|opinions[].order

Example :


```json
        "awards" : [{
            "festivalId": 7,
            "festivalName": "César",
            "festivalCountry": "France",
            "festivalCountryCode" : "FR",
            "festivalPlace": null,
            "year": 2012,
            "awardId": 9,
            "awardName": "César du meilleur réalisateur",
            "order": 9
          }]
```

### List structure
-------------------------------

Today lists come from ATG. The ATG object could be found under the `data` key. If during the import phase children are found attached to a common BDDP object we provide the `parentId`.

```json
        {
          "objectType": "PACK",
          "contentType": "LIST",
          "itemType": "LIST",
          "id": -32404,
          "parentId": 4443353,
          "version": "20141222083339",
          "data": {
            "itemType": "season",
            "id": "8100842",
            "children": [
              "ANT_1163791_6",
              "ANT_1163791_8",
              "ANT_1163791_10",
              "ANT_1163791_16",
              "ANT_1163791_11",
              "ANT_1163791_7",
              "ANT_1163791_13",
              "ANT_1163791_2",
              "ANT_1163791_9",
              "ANT_1163791_17",
              "ANT_1163791_12",
              "ANT_1163791_5",
              "ANT_1163791_4",
              "ANT_1163791_18",
              "ANT_1163791_1",
              "ANT_1163791_3",
              "ANT_1163791_14",
              "ANT_1163791_15"
            ],
            "revision": 1415366598647
          }
        }
```

# Group Security

A security token is needed in order to access to the API. A master token will be provided. Using this token you will be able to call the session token to retrieve one of them. A session token is valid during 10 minutes and should be renew.


## Session token [/api/security/token/session/{masterToken}]

Return a valid token that can be used to query the API

+ Parameters
    + masterToken ( required, string, `RETFGDFGTRHDFGDFGF`) ... Your master token.
    

### New session token [GET]

Return a new session token

+ Response 200 (application/json)

        {
          "sessionToken" : "RETFGDFGTRHDFGDFGF",
          "validUntil" : "2012-08-03T19:16:06.000+0000"
        }

+ Response 403 (application/json)        

# Group Content

Each content is typed using two fields. The first is `objectType` and should be used to determine what kind of object we're dealing with. Then `contentType` will be used to get an editorial kind of what is in the content.

Each object is typed using `objectType` field. This value should be used to known how to act with the current object :
- `BRAND` : Represent a brand. No parent is defined.
- `SEASON` : Represent a season. The `SEASON` parent is a `BRAND`.
- `UNIT` : Every content that don't have child or parent relation.
- `LIST` : BDDP Pack and Part. Should be refactored in the future.
- `PACK `: ATG Imported list.

In addition, is provided the contentn type `contentType`
- `FILM` : Movie
- `SERIE` : Brand
- `DESSINANIME` : Animation
- `MAGAZINE` : Magazine
- `CONCERT` : Music
- `THEATRE` : Theater
- `SPORT` : Sport
- `DOCUMENTAIRE` : Documentary
- `AUTRE` : Other
- `SHOW` : Show
- `SEASON` : Season

For a UI purpose a third attribute is exposed `itemType`. In V1 the value is automatically computed based on the `objectType`, the `contentType` and the attached object (parent, child) :

- `LIST`
- `BRAND`
- `SEASON`
- `SHOW`
- `MOVIE`
- `EPISODE`
- `PROGRAM`

## Content list [/api/contents?version={version}&limit={limit}&page={page}&full={full}]

### Get contents [GET]

+ Parameters
    + version (required, number, `20141123101010`) ... String representing the version that will be used to filter the returned objects.
    + limit (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page (optional, number, `2`) ... The page to be returned
    + full (optional, boolean, `true`) ... Ask for full objects or not


+ Response 200 (application/json)


        {
           "data":[
              {
                 "objectType":"UNIT",
                 "contentType":"MAGAZINE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Le mag de la science",
                    "titleDivisible":"Le mag de la science"
                 },
                 "synopsis":{
                    "small":"Présenté par Jérôme Bonaldi. ",
                    "medium":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                    "large":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                 },
                 "productionYear":"2012",
                 "updateDate":"2012-08-03T19:16:06.000+0000",
                 "id":95576,
                 "lang":"fr",
                 "version":"20120803191606",
                 "duration":"25",
                 "boost":1
              },
              {
                 "objectType":"UNIT",
                 "contentType":"MAGAZINE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Le mag de la science",
                    "titleDivisible":"Le mag de la science"
                 },
                 "synopsis":{
                    "small":"Présenté par Jérôme Bonaldi. ",
                    "medium":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                    "large":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                 },
                 "productionYear":"2012",
                 "updateDate":"2012-08-03T19:16:06.000+0000",
                 "id":95577,
                 "lang":"fr",
                 "version":"20120803191606",
                 "duration":"30",
                 "boost":1
              },
              {
                 "objectType":"UNIT",
                 "contentType":"MAGAZINE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Le mag de la science",
                    "titleDivisible":"Le mag de la science"
                 },
                 "synopsis":{
                    "small":"Présenté par Jérôme Bonaldi. ",
                    "medium":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                    "large":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                 },
                 "productionYear":"2012",
                 "updateDate":"2012-08-03T19:16:06.000+0000",
                 "id":95580,
                 "lang":"fr",
                 "version":"20120803191606",
                 "duration":"30",
                 "boost":1
              },
              {
                 "objectType":"UNIT",
                 "contentType":"MAGAZINE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Le mag de la science",
                    "titleDivisible":"Le mag de la science"
                 },
                 "synopsis":{
                    "small":"Présenté par Jérôme Bonaldi. ",
                    "medium":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                    "large":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                 },
                 "productionYear":"2012",
                 "updateDate":"2012-08-03T19:16:06.000+0000",
                 "id":95643,
                 "lang":"fr",
                 "version":"20120803191606",
                 "duration":"30",
                 "boost":1
              },
              {
                 "objectType":"UNIT",
                 "contentType":"MAGAZINE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Le mag de la science",
                    "titleDivisible":"Le mag de la science"
                 },
                 "synopsis":{
                    "small":"Présenté par Jérôme Bonaldi. ",
                    "medium":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                    "large":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                 },
                 "productionYear":"2012",
                 "updateDate":"2012-08-03T19:16:06.000+0000",
                 "id":95662,
                 "lang":"fr",
                 "version":"20120803191606",
                 "duration":"30",
                 "boost":1
              },
              {
                 "objectType":"UNIT",
                 "contentType":"MAGAZINE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Le mag de la science",
                    "titleDivisible":"Le mag de la science"
                 },
                 "synopsis":{
                    "small":"Présenté par Jérôme Bonaldi. ",
                    "medium":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                    "large":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                 },
                 "productionYear":"2012",
                 "updateDate":"2012-08-03T19:16:06.000+0000",
                 "id":95667,
                 "lang":"fr",
                 "version":"20120803191606",
                 "duration":"30",
                 "boost":1
              },
              {
                 "objectType":"UNIT",
                 "contentType":"MAGAZINE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Le mag de la science",
                    "titleDivisible":"Le mag de la science"
                 },
                 "synopsis":{
                    "small":"Présenté par Jérôme Bonaldi. ",
                    "medium":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                    "large":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                 },
                 "productionYear":"2012",
                 "updateDate":"2012-08-03T19:16:06.000+0000",
                 "id":95668,
                 "lang":"fr",
                 "version":"20120803191606",
                 "duration":"30",
                 "boost":1
              },
              {
                 "objectType":"UNIT",
                 "contentType":"MAGAZINE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Le mag de la science",
                    "titleDivisible":"Le mag de la science"
                 },
                 "synopsis":{
                    "small":"Présenté par Jérôme Bonaldi. ",
                    "medium":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                    "large":"Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                 },
                 "productionYear":"2012",
                 "updateDate":"2012-08-03T19:16:07.000+0000",
                 "id":95707,
                 "lang":"fr",
                 "version":"20120803191607",
                 "duration":"30",
                 "boost":1
              },
              {
                 "objectType":"UNIT",
                 "contentType":"AUTRE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Interruption des...",
                    "titleDivisible":"Interruption des programmes"
                 },
                 "synopsis":{
                    "small":"Interruption des programmes",
                    "large":"Interruption des programmes"
                 },
                 "updateDate":"2012-08-03T19:16:05.000+0000",
                 "id":95574,
                 "lang":"fr",
                 "version":"20120803191605",
                 "duration":"10",
                 "boost":1
              },
              {
                 "objectType":"UNIT",
                 "contentType":"AUTRE",
                 "itemType":"movie",
                 "titles":{
                    "epgTitle":"Interruption des...",
                    "titleDivisible":"Interruption des programmes"
                 },
                 "synopsis":{
                    "small":"Interruption des programmes",
                    "large":"Interruption des programmes"
                 },
                 "updateDate":"2012-08-03T19:16:07.000+0000",
                 "id":95705,
                 "lang":"fr",
                 "version":"20120803191607",
                 "duration":"10",
                 "boost":1
              }
           ],
           "paging":{
              "next":"http://172.31.77.201:8080/api/contents/?Access-Token=BA6F17BD69C82C18BFBF7A8DB5AAF&page=1&version=20120803191607&full=false"
           }
        }

+ Response 200 (application/json)


        {
          "data": [
            {
              "objectType": "UNIT",
              "contentType": "FILM",
              "itemType": "MOVIE",
              "titles": {
                "originalTitle": "The Matrix",
                "epgTitle": "Matrix",
                "titleDivisible": "Matrix",
                "titleIndivisible": null,
                "subTitleDivisible": "Film Science-fiction",
                "subTitleIndivisible": null
              },
              "medias": [
                {
                  "type": "IMAGE",
                  "height": 394,
                  "width": 700,
                  "format": "image/jpeg",
                  "name": "169_3235.jpg",
                  "imgType": "STD169",
                  "copyright": null,
                  "rank": 1,
                  "id": 3608,
                  "updateDate": "2013-04-13T12:14:31.000+0200",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 272,
                  "width": 352,
                  "format": "image/jpeg",
                  "name": "STD_3236.jpg",
                  "imgType": "STD",
                  "copyright": " ",
                  "rank": 1,
                  "id": 111894,
                  "updateDate": "2012-08-27T12:01:41.000+0200",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 600,
                  "width": 800,
                  "format": "image/jpeg",
                  "name": "canal.fr_1042176_1_VM_16_MTBD_804.jpg",
                  "imgType": "STD",
                  "copyright": null,
                  "rank": 1,
                  "id": 1787918,
                  "updateDate": "2014-12-18T08:08:44.000+0100",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 426,
                  "width": 964,
                  "format": "image/jpeg",
                  "name": "MEA_193668_3236.jpg",
                  "imgType": "MEAEUREKA",
                  "copyright": null,
                  "rank": 1,
                  "id": 15118664,
                  "updateDate": "2014-12-08T10:57:48.000+0100",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 426,
                  "width": 964,
                  "format": "image/jpeg",
                  "name": "MEA_193668_3236.jpg",
                  "imgType": "MEASOIR",
                  "copyright": null,
                  "rank": 1,
                  "id": 15118664,
                  "updateDate": "2014-12-08T10:57:48.000+0100",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 394,
                  "width": 700,
                  "format": "image/jpeg",
                  "name": "169_159100.jpg",
                  "imgType": "STD169",
                  "copyright": "Warner Bros Entertainment",
                  "rank": 1,
                  "id": 15119984,
                  "updateDate": "2014-12-08T12:11:04.000+0100",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 272,
                  "width": 352,
                  "format": "image/jpeg",
                  "name": "STD_159100.jpg",
                  "imgType": "STD",
                  "copyright": "Warner Bros Entertainment",
                  "rank": 1,
                  "id": 15119989,
                  "updateDate": "2014-12-08T12:11:04.000+0100",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 360,
                  "width": 1400,
                  "format": "image/jpeg",
                  "name": "19.12_matrix.jpg",
                  "imgType": "CARWEB",
                  "copyright": null,
                  "rank": 1,
                  "id": 15325879,
                  "updateDate": "2014-12-13T14:56:37.000+0100",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                }
              ],
              "color": "1",
              "productionNationality": "Etats-Unis",
              "productionNationalityCode": ["US"],
              "productionYear": "1999",
              "updateDate": "2015-01-19T20:18:12.000+0100",
              "creationDate": null,
              "synopsis": "Dans un futur proche, un jeune pirate informatique, aidé par un groupe de résistants, déclare la guerre à une dictature d'un nouveau genre, «la Matrice».",
              "mediumSynopsis": "Dans un futur proche, un jeune programmeur, Thomas Anderson, mène une vie routinière entre son travail «officiel», plutôt assommant, et ses activités nocturnes de pirate informatique, qu'il mène sous le pseudonyme de Neo. Un jour, un certain Morpheus le contacte, l'invitant à aller au-delà des apparences...",
              "longSynopsis": "Dans un futur proche, un jeune programmeur, Thomas Anderson, mène une vie routinière entre son travail «officiel», plutôt assommant, et ses activités nocturnes de pirate informatique, qu'il mène sous le pseudonyme de Neo. Un jour, un certain Morpheus le contacte, l'invitant à aller au-delà des apparences pour lutter contre «la Matrice». Très intrigué, et après moult aventures, Neo finit par rencontrer son énigmatique interlocuteur. Ce qu'il apprend alors le stupéfie : d'après Morpheus, le monde dans lequel il vit n'est qu'une immense illusion, générée par un ordinateur ultra-perfectionné et contrôlée par un mystérieux organisme : la Matrice. Neo serait le seul homme capable de vaincre la Matrice et de mettre fin à l'esclavage de ses congénères...",
              "id": 114045,
              "parentId": null,
              "num": 0,
              "members": {
                "2": {
                  "id": 2,
                  "function": "Acteur",
                  "rank": 12,
                  "prefix": "Avec : ",
                  "persons": [
                    {
                      "lastName": "Reeves",
                      "firstName": "Keanu",
                      "rank": 1,
                      "id": 21123,
                      "awards": null
                    },
                    {
                      "lastName": "Fishburne",
                      "firstName": "Laurence",
                      "rank": 2,
                      "id": 21097,
                      "awards": null
                    },
                    {
                      "lastName": "Moss",
                      "firstName": "Carrie-Anne",
                      "rank": 3,
                      "id": 25365,
                      "awards": null
                    },
                    {
                      "lastName": "Weaving",
                      "firstName": "Hugo",
                      "rank": 4,
                      "id": 17385,
                      "awards": null
                    },
                    {
                      "lastName": "Foster",
                      "firstName": "Gloria",
                      "rank": 5,
                      "id": 12420,
                      "awards": null
                    },
                    {
                      "lastName": "Pantoliano",
                      "firstName": "Joe",
                      "rank": 6,
                      "id": 19494,
                      "awards": null
                    },
                    {
                      "lastName": "Chong",
                      "firstName": "Marcus",
                      "rank": 7,
                      "id": 12422,
                      "awards": null
                    },
                    {
                      "lastName": "Arahanga",
                      "firstName": "Julian",
                      "rank": 8,
                      "id": 12419,
                      "awards": null
                    },
                    {
                      "lastName": "McClory",
                      "firstName": "Belinda",
                      "rank": 9,
                      "id": 12421,
                      "awards": null
                    },
                    {
                      "lastName": "Goddard",
                      "firstName": "Paul",
                      "rank": 10,
                      "id": 27225,
                      "awards": null
                    }
                  ]
                },
                "4": {
                  "id": 4,
                  "function": "Réalisateur",
                  "rank": 1,
                  "prefix": "De : ",
                  "persons": [
                    {
                      "lastName": "Wachowski",
                      "firstName": "Andy",
                      "rank": 1,
                      "id": 25198,
                      "awards": null
                    },
                    {
                      "lastName": "Wachowski",
                      "firstName": "Lana",
                      "rank": 2,
                      "id": 12393,
                      "awards": null
                    }
                  ]
                }
              },
              "partners": {
                "20": {
                  "name": "Allociné",
                  "id": 20,
                  "opinions": [
                    {
                      "type": "NOTE_PRESSE",
                      "rating": 3.5,
                      "name": null,
                      "recommended": false,
                      "opinion": null
                    }
                  ]
                },
                "25": {
                  "name": "Télérama",
                  "id": 25,
                  "opinions": [
                    {
                      "type": "NOTE_TELERAMA",
                      "rating": 1,
                      "name": "Critique",
                      "recommended": true,
                      "opinion": "Dans un futur proche, un hacker déclare la guerre à une dictature d'un nouveau genre, la Matrice. LE film qui a redistribué les cartes du cinéma d'action hollywoodien. Brillant pot-pourri des tendances fin de siècle : mangas, jeux vidéo, kung-fu, virtuel."
                    }
                  ]
                },
                "26": {
                  "name": "Télécâble Sat",
                  "id": 26,
                  "opinions": [
                    {
                      "type": "NOTE_ETOILE",
                      "rating": 4,
                      "name": "Critique",
                      "recommended": true,
                      "opinion": "«Matrix» ne se contente pas d'être spectaculaire. Ce grand film innovant a modernisé radicalement des vieux thèmes de la science-fiction, révolutionné l'utilisation des effets spéciaux (ils deviennent un vrai enjeu dramatique) et assimilé intelligemment la culture des jeux vidéo."
                    }
                  ]
                },
                "44": {
                  "name": "SensCritique",
                  "id": 44,
                  "opinions": [
                    {
                      "type": "NOTE_SENSCRIT",
                      "rating": 7.7,
                      "name": null,
                      "recommended": true,
                      "opinion": null
                    }
                  ]
                }
              },
              "tagsByType": {
                "GENRE_CANAL": [
                  {
                    "id": 1,
                    "label": "Cinéma"
                  }
                ],
                "SOUS_GENRE_CANAL": [
                  {
                    "id": 28,
                    "label": "Film Science-fiction"
                  }
                ],
                "MOTCLE": [
                  {
                    "id": 2185,
                    "label": "Matrix"
                  }
                ]
              },
              "totalEpisode": null,
              "subObject": null,
              "lang": "fr",
              "version": "20150119191812",
              "awards": null,
              "ratingCSA": 2,
              "ageRange": 2,
              "duration": "136",
              "boost": "28899",
              "data": null
            },
            {
              "objectType": "BRAND",
              "contentType": "SERIE",
              "itemType": "BRAND",
              "titles": {
                "originalTitle": "Army Wives",
                "epgTitle": "American Wives",
                "titleDivisible": "American Wives",
                "titleIndivisible": null,
                "subTitleDivisible": "Série Drame",
                "subTitleIndivisible": null
              },
              "medias": [],
              "color": "1",
              "productionNationality": "Etats-Unis",
              "productionNationalityCode": ["US"],
              "productionYear": null,
              "updateDate": "2014-12-01T11:00:59.000+0100",
              "creationDate": null,
              "synopsis": "Le quotidien de quatre femmes et un homme, tous mariés à un militaire, qui vivent ensemble sur la base de Fort Marshall, en Caroline du Sud.",
              "mediumSynopsis": "Le quotidien de quatre femmes et un homme, tous mariés à un militaire, qui vivent ensemble sur la base de Fort Marshall, en Caroline du Sud.",
              "longSynopsis": "Sur la base militaire de Fort Marshall, située en Caroline du Sud, quatre femmes et un homme ont pour point commun d'être mariés à un militaire. Ils gèrent le quotidien et s'occupent des enfants, en attendant patiemment le retour de leurs conjoints. Au fil du temps, des liens d'amitié et de fraternité se sont tissés entre eux et ils sont amenés à partager leurs secrets, plaisirs et malheurs, et surtout à s'entraider. Une série adaptée du roman «Army Wives : The Unwritten Code of Military Marriage», de Tanya Biank.",
              "id": 4444232,
              "parentId": null,
              "num": null,
              "members": {
                "2": {
                  "id": 2,
                  "function": "Acteur",
                  "rank": 12,
                  "prefix": "Avec : ",
                  "persons": [
                    {
                      "lastName": "Pressman",
                      "firstName": "Sally",
                      "rank": 1,
                      "id": 121701,
                      "awards": null
                    },
                    {
                      "lastName": "Fuller",
                      "firstName": "Drew",
                      "rank": 2,
                      "id": 121721,
                      "awards": null
                    },
                    {
                      "lastName": "McNamara",
                      "firstName": "Brian",
                      "rank": 3,
                      "id": 119045,
                      "awards": null
                    },
                    {
                      "lastName": "Delaney",
                      "firstName": "Sean",
                      "rank": 4,
                      "id": 5465,
                      "awards": null
                    },
                    {
                      "lastName": "Bell",
                      "firstName": "Catherine",
                      "rank": 5,
                      "id": 6528,
                      "awards": null
                    },
                    {
                      "lastName": "Brannagh",
                      "firstName": "Brigid",
                      "rank": 6,
                      "id": 121694,
                      "awards": null
                    }
                  ]
                }
              },
              "partners": null,
              "tagsByType": {
                "GENRE_CANAL": [
                  {
                    "id": 4,
                    "label": "Séries"
                  }
                ],
                "SOUS_GENRE_CANAL": [
                  {
                    "id": 90,
                    "label": "Série Drame"
                  }
                ]
              },
              "totalEpisode": null,
              "subObject": [
                4567398
              ],
              "lang": "fr",
              "version": "20141201100059",
              "awards": null,
              "ratingCSA": null,
              "duration": "0",
              "boost": "1",
              "data": null
            },
            {
              "objectType": "SEASON",
              "contentType": "SERIE",
              "itemType": "SEASON",
              "titles": {
                "originalTitle": "Revenge",
                "epgTitle": "Revenge",
                "titleDivisible": "Revenge",
                "titleIndivisible": null,
                "subTitleDivisible": "Série Drame",
                "subTitleIndivisible": null
              },
              "medias": [
                {
                  "type": "IMAGE",
                  "height": 272,
                  "width": 352,
                  "format": "image/jpeg",
                  "name": "STD_530890.jpg",
                  "imgType": "STD",
                  "copyright": "American Broadcasting Companies, Inc",
                  "rank": 1,
                  "id": 12756014,
                  "updateDate": "2014-09-29T19:32:31.000+0200",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 394,
                  "width": 700,
                  "format": "image/jpeg",
                  "name": "169_530890.jpg",
                  "imgType": "STD169",
                  "copyright": "American Broadcasting Companies, Inc",
                  "rank": 1,
                  "id": 12756025,
                  "updateDate": "2015-01-12T19:27:43.000+0100",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                }
              ],
              "color": "1",
              "productionNationality": "Etats-Unis",
              "productionNationalityCode": ["US"],
              "productionYear": "2014",
              "updateDate": "2014-12-12T10:34:08.000+0100",
              "creationDate": null,
              "synopsis": "La vengeance a changé de camp. Dépouillée de tout ce qui faisait sa vie, Victoria est déterminée à détruire méthodiquement Emily, dont elle a percé le secret.",
              "mediumSynopsis": "La vengeance a changé de camp. Dépouillée de tout ce qui faisait sa vie, Victoria est déterminée à détruire méthodiquement Emily, dont elle a percé le secret.",
              "longSynopsis": "Emily savoure sa revanche. Victoria, son ennemie jurée, a été placée derrière les quatre murs d'un hôpital psychiatrique. La vengeance a changé de camp. Dépouillée de tout ce qui faisait sa vie, Victoria est déterminée à fouler Emily au pied et à la détruire méthodiquement. De son côté, la jeune femme cherche à comprendre pourquoi son père David ne s'est jamais manifesté au point qu'elle l'a cru mort et tremble pour sa soeur Charlotte, en bien mauvaise posture. Le coeur de Jack balance entre Emily et une nouvelle venue.",
              "id": 4443127,
              "parentId": 4443353,
              "num": 4,
              "members": {
                "2": {
                  "id": 2,
                  "function": "Acteur",
                  "rank": 12,
                  "prefix": "Avec : ",
                  "persons": [
                    {
                      "lastName": "Stowe",
                      "firstName": "Madeleine",
                      "rank": 1,
                      "id": 24355,
                      "awards": null
                    },
                    {
                      "lastName": "VanCamp",
                      "firstName": "Emily",
                      "rank": 2,
                      "id": 5934,
                      "awards": null
                    },
                    {
                      "lastName": "Mann",
                      "firstName": "Gabriel",
                      "rank": 3,
                      "id": 921,
                      "awards": null
                    },
                    {
                      "lastName": "Allen",
                      "firstName": "Christa B",
                      "rank": 4,
                      "id": 95544,
                      "awards": null
                    },
                    {
                      "lastName": "Bowman",
                      "firstName": "Joshua",
                      "rank": 5,
                      "id": 20887,
                      "awards": null
                    },
                    {
                      "lastName": "Tupper",
                      "firstName": "James",
                      "rank": 6,
                      "id": 8265,
                      "awards": null
                    },
                    {
                      "lastName": "Vanasse",
                      "firstName": "Karine",
                      "rank": 7,
                      "id": 5122,
                      "awards": null
                    }
                  ]
                }
              },
              "partners": null,
              "tagsByType": {
                "GENRE_CANAL": [
                  {
                    "id": 4,
                    "label": "Séries"
                  }
                ],
                "SOUS_GENRE_CANAL": [
                  {
                    "id": 90,
                    "label": "Série Drame"
                  }
                ],
                "MOTCLE": [
                  {
                    "id": 12029,
                    "label": "Revenge"
                  }
                ]
              },
              "totalEpisode": null,
              "subObject": [
                4132450,
                4164560,
                4201039,
                4214612,
                4259173,
                4272582,
                4308758,
                4331569,
                4332415,
                4332402,
                4440624,
                4555164,
                4594010,
                4610697,
                4383478
              ],
              "lang": "fr",
              "version": "20141212093408",
              "awards": null,
              "ratingCSA": null,
              "duration": "0",
              "boost": "1",
              "data": null
            },
            {
              "objectType": "UNIT",
              "contentType": "SHOW",
              "itemType": "MOVIE",
              "titles": {
                "originalTitle": null,
                "epgTitle": "Le grand journal",
                "titleDivisible": "Le grand journal",
                "titleIndivisible": null,
                "subTitleDivisible": "Le grand journal",
                "subTitleIndivisible": null
              },
              "medias": [
                {
                  "type": "IMAGE",
                  "height": 394,
                  "width": 700,
                  "format": "image/jpeg",
                  "name": "169_529307.jpg",
                  "imgType": "STD169",
                  "copyright": "Canal + / Maxime Bruno",
                  "rank": 1,
                  "id": 12133610,
                  "updateDate": "2014-09-12T16:10:31.000+0200",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 272,
                  "width": 352,
                  "format": "image/jpeg",
                  "name": "STD_529307.jpg",
                  "imgType": "STD",
                  "copyright": "Canal + / Maxime Bruno",
                  "rank": 1,
                  "id": 12133629,
                  "updateDate": "2014-09-12T16:10:31.000+0200",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                }
              ],
              "color": null,
              "productionNationality": "France",
              "productionNationalityCode": ["US"],
              "productionYear": "2014",
              "updateDate": "2014-12-24T08:40:42.000+0100",
              "creationDate": null,
              "synopsis": "En compagnie des personnalités marquantes de l'actualité, Antoine de Caunes et ses chroniqueurs discutent politique, sujets de société, sport, littérature, cinéma et musique.",
              "mediumSynopsis": "En compagnie des personnalités marquantes de l'actualité, Antoine de Caunes et ses chroniqueurs discutent politique, sujets de société, sport, littérature, cinéma et musique.",
              "longSynopsis": "En compagnie des personnalités marquantes de l'actualité, Antoine de Caunes et ses chroniqueurs discutent politique, sujets de société, sport, littérature, cinéma et musique.",
              "id": 4444783,
              "parentId": null,
              "num": null,
              "members": {
                "3": {
                  "id": 3,
                  "function": "Présentateur",
                  "rank": 8,
                  "prefix": "Présenté par : ",
                  "persons": [
                    {
                      "lastName": "Caunes",
                      "firstName": "Antoine de",
                      "rank": 1,
                      "id": 118887,
                      "awards": null
                    },
                    {
                      "lastName": "Aphatie",
                      "firstName": "Jean-Michel",
                      "rank": 2,
                      "id": 2937,
                      "awards": null
                    },
                    {
                      "lastName": "Rissouli",
                      "firstName": "Karim",
                      "rank": 3,
                      "id": 3509,
                      "awards": null
                    },
                    {
                      "lastName": "Trapenard",
                      "firstName": "Augustin",
                      "rank": 4,
                      "id": 127857,
                      "awards": null
                    },
                    {
                      "lastName": "Polony",
                      "firstName": "Natacha",
                      "rank": 5,
                      "id": 5646,
                      "awards": null
                    },
                    {
                      "lastName": "Serrell",
                      "firstName": "Mathilde",
                      "rank": 6,
                      "id": 164983,
                      "awards": null
                    }
                  ]
                }
              },
              "partners": null,
              "tagsByType": {
                "GENRE_CANAL": [
                  {
                    "id": 7,
                    "label": "Divertissement"
                  }
                ],
                "SOUS_GENRE_CANAL": [
                  {
                    "id": 146,
                    "label": "Talk show"
                  }
                ]
              },
              "totalEpisode": null,
              "subObject": null,
              "lang": "fr",
              "version": "20141224074042",
              "awards": null,
              "ratingCSA": 1,
              "ageRange": 2,
              "duration": "50",
              "boost": "1",
              "data": null
            },
            {
              "objectType": "LIST",
              "contentType": "AUTRE",
              "itemType": "SHOW",
              "titles": {
                "originalTitle": null,
                "epgTitle": "Jeunesse2",
                "titleDivisible": "Jeunesse2",
                "titleIndivisible": null,
                "subTitleDivisible": "Divertissement",
                "subTitleIndivisible": null
              },
              "medias": [],
              "color": null,
              "productionNationality": null,
              "productionNationalityCode": ["US"],
              "productionYear": null,
              "updateDate": "2015-02-02T16:37:39.000+0100",
              "creationDate": null,
              "synopsis": null,
              "mediumSynopsis": null,
              "longSynopsis": null,
              "id": 4696605,
              "parentId": null,
              "num": null,
              "members": null,
              "partners": null,
              "tagsByType": {
                "GENRE_CANAL": [
                  {
                    "id": 7,
                    "label": "Divertissement"
                  }
                ],
                "SOUS_GENRE_CANAL": [
                  {
                    "id": 152,
                    "label": "Divertissement"
                  }
                ]
              },
              "totalEpisode": null,
              "subObject": null,
              "lang": "fr",
              "version": "20150202153739",
              "awards": null,
              "ratingCSA": 4,
              "duration": "0",
              "boost": "1",
              "data": {
                "itemType": "list",
                "id": "6Play_chaine_M6_Jeunesse1",
                "revision": 1417521707328,
                "title": "Jeunesse2",
                "creationDate": "2014-02-19",
                "ratingCSA": 4,
                "idKey": "6Play_chaine_M6_Jeunesse1",
                "tags": [
                  {
                    "type": "CLASSIFICATION",
                    "name": "Csat_CornerChaine_M6",
                    "displayName": "Csat_CornerChaine_M6"
                  }
                ],
                "channel": {
                  "itemType": "externalChannel",
                  "id": "M6"
                },
                "maxResult": 1999,
                "accessPeriods": [
                  {
                    "startMinute": 0,
                    "endMinute": 0,
                    "startHour": 0,
                    "endHour": 20
                  }
                ],
                "rules": [
                  {
                    "id": "9800004",
                    "itemType": "searchRule",
                    "maxResult": 2000,
                    "query": "tags_CLASSIFICATION:\\/6Play\\/Chaines\\/M6\\/6Play\\ \\-\\ Jeunesse* AND (itemType:serie OR itemType:season OR itemType:show)"
                  }
                ]
              }
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/contents/?page=2",
            "nbElement": 5
          }
        }

### Create a content [POST]

This method allows users to create content (only itemType:"collection" allowed).
The locale has to be in the french language

+ Request (application/json)

        {
            "titles": {
                "originalTitle": "originalTitle",
                "epgTitle": "titreepg1DE"
            }
        }
        

+ Request (application/json)

        {
            "duration":120,
            "boost":80027,
            "rubricId":100000,
            "categoryId":100000,
            "data":"{\"field\": \"value1\"}",
            "titles": {
                "originalTitle": "originalTitle",
                "epgTitle": "titreepgFR",
                "titleDivisible": "titreLabelliseSecableFR",
                "titleIndivisible": "titreLabelliseInsecableFR",
                "subTitleDivisible": "sousTitreLabelliseSecableFR",
                "subTitleIndivisible": "sousTitreLabelliseInsecableFR"
            },
            "synopsis": {
                "small": "resumecourtFR",
                "large": "resumeLongFR",
                "medium": "resumemoyen1FR"
            }
        }

+ Response 200 (application/json)

  + Headers

            Location: /api/contents/99999999/

+ response 400 (application/json)

        {
          "errorCode": "400",
          "message": "Reason"
        }

## Content [/api/contents/{id}?full={full}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
    + full (optional, boolean, `true`) ... Ask for full object or not

### Retrieve a content [GET]
+ Response 200 (application/json)

        {
            "objectType": "UNIT",
            "contentType": "FILM",
            "itemType": "movie",
            "titles": {
                "originalTitle": "The Artist",
                "epgTitle": "The Artist",
                "titleDivisible": "The Artist",
                "subTitleDivisible": "Film Comédie dramatique"
            },
            "synopsis": {
                "small": "En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
                "medium": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
                "large": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
            },
            "color": "0",
            "productionNationality": "France - Belgique",
            "productionNationalityCode": ["FR","BE"],
            "productionYear": "2011",
            "updateDate": "2014-12-08T20:12:08.000+0000",
            "id": 585877,
            "num": 1,
            "lang": "fr",
            "version": "20141208201208",
            "ratingCSA": 1,
            "ageRange": 2,
            "duration": "100",
            "boost": 32715,
            "diffusionDate": "2012-10-05T18:55:00.000+0000"
        }
        
+ Response 200 (application/json)


        {
           "objectType":"UNIT",
           "contentType":"FILM",
           "itemType":"movie",
           "titles":{
              "originalTitle":"The Artist",
              "epgTitle":"The Artist",
              "titleDivisible":"The Artist",
              "subTitleDivisible":"Film Comédie dramatique"
           },
           "synopsis":{
              "small":"En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
              "medium":"A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
              "large":"A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
           },
           "medias":[
              {
                 "type":"IMAGE",
                 "height":272,
                 "width":352,
                 "format":"image/jpeg",
                 "name":"STD_298296.jpg",
                 "imgType":"STD",
                 "rank":1,
                 "id":191281,
                 "updateDate":"2012-09-10T21:44:25.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
              },
              {
                 "type":"IMAGE",
                 "height":394,
                 "width":700,
                 "format":"image/jpeg",
                 "name":"169_298296.jpg",
                 "imgType":"STD169",
                 "rank":1,
                 "id":191284,
                 "updateDate":"2013-09-23T12:07:47.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
              },
              {
                 "type":"IMAGE",
                 "height":600,
                 "width":800,
                 "format":"image/jpeg",
                 "name":"ANT_1075478_1_804.jpg",
                 "imgType":"STD",
                 "rank":1,
                 "id":291889,
                 "updateDate":"2012-10-05T17:33:41.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
              },
              {
                 "type":"IMAGE",
                 "height":576,
                 "width":1024,
                 "format":"image/jpeg",
                 "name":"ANT_1075478_1_412.jpg",
                 "imgType":"STD169",
                 "rank":1,
                 "id":291893,
                 "updateDate":"2012-10-05T17:33:41.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
              },
              {
                 "type":"IMAGE",
                 "height":426,
                 "width":964,
                 "format":"image/jpeg",
                 "name":"MEA_28153194_298288.jpg",
                 "imgType":"MEAEUREKA",
                 "rank":1,
                 "id":12652568,
                 "updateDate":"2014-09-26T18:13:43.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
              },
              {
                 "type":"IMAGE",
                 "height":426,
                 "width":964,
                 "format":"image/jpeg",
                 "name":"MEA_28153194_298288.jpg",
                 "imgType":"MEASOIR",
                 "rank":1,
                 "id":12652568,
                 "updateDate":"2014-09-26T18:13:43.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
              },
              {
                 "type":"IMAGE",
                 "height":360,
                 "width":1400,
                 "format":"image/jpeg",
                 "name":"05_10_theartiste.jpg",
                 "imgType":"CARWEB",
                 "rank":1,
                 "id":12752996,
                 "updateDate":"2014-09-29T12:19:57.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
              }
           ],
           "color":"0",
           "productionNationality":"France - Belgique",
           "productionNationalityCode": ["FR","BE"],
           "productionYear":"2011",
           "updateDate":"2014-12-08T20:12:08.000+0000",
           "id":585877,
           "num":1,
           "members":{
              "2":{
                 "id":2,
                 "function":"Acteur",
                 "rank":12,
                 "prefix":"Avec : ",
                 "persons":[
                    {
                       "lastName":"Dujardin",
                       "firstName":"Jean",
                       "rank":1,
                       "id":1477,
                       "role":"George Valentin",
                       "awards":[
                          {
                             "festivalId":10,
                             "festivalName":"Oscars",
                             "festivalCountry":"Etats-Unis",
                             "festivalCountryCode" : "US",
                             "year":2012,
                             "awardId":11,
                             "awardName":"Oscar du meilleur acteur",
                             "order":11
                          }
                       ]
                    },
                    {
                       "lastName":"Bejo",
                       "firstName":"Bérénice",
                       "rank":2,
                       "id":1622,
                       "role":"Peppy Miller",
                       "awards":[
                          {
                             "festivalId":7,
                             "festivalName":"César",
                             "festivalCountry":"France",
                             "festivalCountryCode" : "US",
                             "year":2012,
                             "awardId":12,
                             "awardName":"César de la meilleur actrice",
                             "order":12
                          }
                       ]
                    },
                    {
                       "lastName":"Goodman",
                       "firstName":"John",
                       "rank":3,
                       "id":1018,
                       "role":"Al Zimmer"
                    },
                    {
                       "lastName":"Cromwell",
                       "firstName":"James",
                       "rank":4,
                       "id":25450,
                       "role":"Clifton"
                    },
                    {
                       "lastName":"Pyle",
                       "firstName":"Missy",
                       "rank":5,
                       "id":17557,
                       "role":"Constance"
                    },
                    {
                       "lastName":"Miller",
                       "firstName":"Penelope Ann",
                       "rank":6,
                       "id":16975,
                       "role":"Doris"
                    },
                    {
                       "lastName":"Tulloch",
                       "firstName":"Bitsie",
                       "rank":7,
                       "id":6961,
                       "role":"Norma"
                    },
                    {
                       "lastName":"Grant",
                       "firstName":"Beth",
                       "rank":8,
                       "id":17187,
                       "role":"la servante"
                    },
                    {
                       "lastName":"Pankin",
                       "firstName":"Stuart",
                       "rank":9,
                       "id":6958,
                       "role":"Otto"
                    },
                    {
                       "lastName":"Margulies",
                       "firstName":"Joshua",
                       "rank":10,
                       "id":6960,
                       "role":"Jacques"
                    },
                    {
                       "lastName":"Laren",
                       "firstName":"Michael",
                       "rank":11,
                       "id":6956,
                       "role":"Michel"
                    },
                    {
                       "lastName":"Dean",
                       "firstName":"Calvin",
                       "rank":12,
                       "id":6952,
                       "role":"monsieur Sauveur"
                    }
                 ]
              },
              "4":{
                 "id":4,
                 "function":"Réalisateur",
                 "rank":1,
                 "prefix":"De : ",
                 "persons":[
                    {
                       "lastName":"Hazanavicius",
                       "firstName":"Michel",
                       "rank":1,
                       "id":23711,
                       "role":"N/A",
                       "awards":[
                          {
                             "festivalId":10,
                             "festivalName":"Oscars",
                             "festivalCountry":"Etats-Unis",
                             "festivalCountryCode" : "US",
                             "year":2012,
                             "awardId":8,
                             "awardName":"Oscar du meilleur réalisateur",
                             "order":8
                          },
                          {
                             "festivalId":7,
                             "festivalName":"César",
                             "festivalCountry":"France",
                             "festivalCountryCode" : "FR",
                             "year":2012,
                             "awardId":9,
                             "awardName":"César du meilleur réalisateur",
                             "order":9
                          }
                       ]
                    }
                 ]
              }
           },
           "partners":{
              "20":{
                 "name":"Allociné",
                 "id":20,
                 "opinions":[
                    {
                       "type":"NOTE_PRESSE",
                       "rating":4,
                       "recommended":true
                    }
                 ]
              },
              "25":{
                 "name":"Télérama",
                 "id":25,
                 "opinions":[
                    {
                       "type":"NOTE_TELERAMA",
                       "rating":2,
                       "name":"Critique",
                       "recommended":true,
                       "opinion":"Le film multiprimé des deux côtés de l'Atlantique, devenu un phénomène ! Michel Hazanavicius rend hommage au septième art, à ses débuts, en noir et blanc et muet. Jean Dujardin, en star déchue, apporte son charme facétieux à cette comédie nostalgique."
                    }
                 ]
              },
              "26":{
                 "name":"Télécâble Sat",
                 "id":26,
                 "opinions":[
                    {
                       "type":"NOTE_ETOILE",
                       "rating":4,
                       "name":"Critique",
                       "recommended":true,
                       "opinion":"Un film muet, en noir et blanc, dans la grande tradition du genre : un défi osé, brillamment relevé. Les images sont belles, la musique entraînante, le scénario plein d'humour. Cinq oscars, six César et prix d'interprétation à Cannes pour Jean Dujardin, qui forme un duo formidable avec Bérénice Bejo."
                    }
                 ]
              },
              "44":{
                 "name":"SensCritique",
                 "id":44,
                 "opinions":[
                    {
                       "type":"NOTE_SENSCRIT",
                       "rating":6.8,
                       "recommended":true
                    }
                 ]
              }
           },
           "tagsByType":{
              "GENRE_CANAL":[
                 {
                    "id":1,
                    "label":"Cinéma"
                 }
              ],
              "SOUS_GENRE_CANAL":[
                 {
                    "id":20,
                    "label":"Film Comédie dramatique"
                 }
              ]
           },
           "lang":"fr",
           "version":"20141208201208",
           "awards":[
              {
                 "festivalId":10,
                 "festivalName":"Oscars",
                 "festivalCountry":"Etats-Unis",
                 "festivalCountryCode" : "US",
                 "year":2012,
                 "awardId":2,
                 "awardName":"Oscar du meilleur film",
                 "order":2
              },
              {
                 "festivalId":7,
                 "festivalName":"César",
                 "festivalCountry":"France",
                 "festivalCountryCode" : "FR",
                 "year":2012,
                 "awardId":3,
                 "awardName":"César du meilleur film",
                 "order":3
              }
           ],
           "ratingCSA":1,
           "duration":"100",
           "boost":32715,
           "diffusionDate":"2012-10-05T18:55:00.000+0000"
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

### Update a content [PUT]

This method allow users to update a content. Only these field are updatable
The update is based on the locale used for the request.
Collections rules could be also updated using this method.

+ Request (application/json)

        {
            "rubricId":100000,
            "categoryId":100000,
            "data":"{\"field\": \"value1\"}",
            "titles": {
                "originalTitle": "originalTitle",
                "epgTitle": "titreepgFR",
                "titleDivisible": "titreLabelliseSecableFR",
                "titleIndivisible": "titreLabelliseInsecableFR",
                "subTitleDivisible": "sousTitreLabelliseSecableFR",
                "subTitleIndivisible": "sousTitreLabelliseInsecableFR"
            },
            "synopsis": {
                "small": "resumecourtFR",
                "large": "resumeLongFR",
                "medium": "resumemoyen1FR"
            }
        }

+ Response 204 (application/json)

+ response 400 (application/json)

        {
          "errorCode": "400",
          "message": "Reason"
        }

### Delete a content [DELETE]

This method allow users to delete a content. Only collection are deletable.

+ Response 200 (application/json)

+ response 403 (application/json)

        {
          "errorCode": "403",
          "message": "Reason"
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }


## Media list [/api/contents/{id}/media]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.

### Retrieve content media [GET]
+ Response 200 (application/json)

        {
          "data": [
            {
              "type": "IMAGE",
              "height": 272,
              "width": 352,
              "format": "image/jpeg",
              "name": "STD_298296.jpg",
              "imgType": "STD",
              "rank": 1,
              "id": 191281,
              "updateDate": "2012-09-10T21:44:25.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            },
            {
              "type": "IMAGE",
              "height": 394,
              "width": 700,
              "format": "image/jpeg",
              "name": "169_298296.jpg",
              "imgType": "STD169",
              "rank": 1,
              "id": 191284,
              "updateDate": "2013-09-23T12:07:47.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            },
            {
              "type": "IMAGE",
              "height": 600,
              "width": 800,
              "format": "image/jpeg",
              "name": "ANT_1075478_1_804.jpg",
              "imgType": "STD",
              "rank": 1,
              "id": 291889,
              "updateDate": "2012-10-05T17:33:41.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            },
            {
              "type": "IMAGE",
              "height": 576,
              "width": 1024,
              "format": "image/jpeg",
              "name": "ANT_1075478_1_412.jpg",
              "imgType": "STD169",
              "rank": 1,
              "id": 291893,
              "updateDate": "2012-10-05T17:33:41.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            },
            {
              "type": "IMAGE",
              "height": 426,
              "width": 964,
              "format": "image/jpeg",
              "name": "MEA_28153194_298288.jpg",
              "imgType": "MEAEUREKA",
              "rank": 1,
              "id": 12652568,
              "updateDate": "2014-09-26T18:13:43.000+0000",
              "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            },
            {
              "type": "IMAGE",
              "height": 426,
              "width": 964,
              "format": "image/jpeg",
              "name": "MEA_28153194_298288.jpg",
              "imgType": "MEASOIR",
              "rank": 1,
              "id": 12652568,
              "updateDate": "2014-09-26T18:13:43.000+0000",
              "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            },
            {
              "type": "IMAGE",
              "height": 360,
              "width": 1400,
              "format": "image/jpeg",
              "name": "05_10_theartiste.jpg",
              "imgType": "CARWEB",
              "rank": 1,
              "id": 12752996,
              "updateDate": "2014-09-29T12:19:57.000+0000",
              "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/contents/{id}/media?page=2"
          }
        }   

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

## Media link [/api/contents/{id}/media/{mediaId}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + mediaId (required, number, `12752996`) ... Numeric `id` of the media.

### Attach a media [PUT]

Attach the given mediaId to the current content

+ Request (application/json)

        [
            {
                "mediaId" : 353535
            },{
                "mediaId" : 353536
            }
        ]

+ Response 201 (application/json)


+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

### dettach a media [DELETE]

Attach the given mediaId to the current content

+ Response 200 (application/json)

+ Response 403 (application/json)

        {
          "errorCode": "403",
          "message": "Reason"
        }

+ Response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }



## Members list [/api/contents/{id}/members]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.

### Retrieve content members [GET]
+ Response 200 (application/json)

        {
          "data": [
          {
            "lastName": "Dujardin",
            "firstName": "Jean",
            "rank": 1,
            "id": 1477,
            "role": "George Valentin",
            "awards": [
              {
                "festivalId": 10,
                "festivalName": "Oscars",
                "festivalCountry": "Etats-Unis",
                "festivalCountryCode" : "US",
                "year": 2012,
                "awardId": 11,
                "awardName": "Oscar du meilleur acteur",
                "order": 11
              }
            ]
          },
          {
            "lastName": "Bejo",
            "firstName": "Bérénice",
            "rank": 2,
            "id": 1622,
            "role": "Peppy Miller",
            "awards": [
              {
                "festivalId": 7,
                "festivalName": "César",
                "festivalCountry": "France",
                "festivalCountryCode" : "FR",
                "year": 2012,
                "awardId": 12,
                "awardName": "César de la meilleur actrice",
                "order": 12
              }
            ]
          }
        ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/contents/{id}/members?page=2"
          }
        }   

## Reviews list [/api/contents/{id}/reviews]

Reviews providers are :

| Partner       | Id |
|---------------|----|
| Allociné      | 20 |
| SensCritique  | 44 |
| Télécâble Sat | 26 |
| Télérama      | 25 |

Each provider can provide :

| Partner       | Rating type     |
|---------------|-----------------|
| Allociné      | NOTE_PRESSE     |
| Allociné      | NOTE_SPECTATEUR |
| SensCritique  | NOTE_SENSCRIT   |
| Télécâble Sat | NOTE_ETOILE     |
| Télérama      | NOTE_TELERAMA   |

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.

### Retrieve content reviews [GET]
+ Response 200 (application/json)

        {
          "data": [
          {
            "name": "Télécâble Sat",
            "id": 26,
            "opinions": [
              {
                "type": "NOTE_ETOILE",
                "rating": 4,
                "name": "Critique",
                "recommended": true,
                "opinion": "Un film muet, en noir et blanc, dans la grande tradition du genre : un défi osé, brillamment relevé. Les images sont belles, la musique entraînante, le scénario plein d'humour. Cinq oscars, six César et prix d'interprétation à Cannes pour Jean Dujardin, qui forme un duo formidable avec Bérénice Bejo."
              }
            ]
          },
          {
            "name": "Télérama",
            "id": 25,
            "opinions": [
              {
                "type": "NOTE_TELERAMA",
                "rating": 2,
                "name": "Critique",
                "recommended": true,
                "opinion": "Le film multiprimé des deux côtés de l'Atlantique, devenu un phénomène ! Michel Hazanavicius rend hommage au septième art, à ses débuts, en noir et blanc et muet. Jean Dujardin, en star déchue, apporte son charme facétieux à cette comédie nostalgique."
              }
            ]
          }
        ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/events/1/2012?page=2"
          }
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

## Tags list [/api/contents/{id}/tags/{tagId}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + tagId (optional, number, `1`) ... Numeric `id` of the tag.


### Retrieve content tags [GET]
+ Response 200 (application/json)

        {
          "data": [
          {
            "type": "GENRE_CANAL",
            "id": 1,
            "label": "Cinéma"
          },
          {
            "type": "SOUS_GENRE_CANAL",
            "id": 20,
            "label": "Film Comédie dramatique"
          }
        ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/contents/{id}/tags/{tagId}?page=2"
          }
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }
        
### Add a new tags link [PUT]


+ Response 200 (application/json)
        

### Delete a tags link [DELETE]

Auto defined tags are not deletable. Only user added link could by deleted

+ Response 200 (application/json)

+ Response 403 (application/json)

        {
          "errorCode": "403",
          "message": "Reason"
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

## Awards list [/api/contents/{id}/awards]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.

### Retrieve content awards [GET]
+ Response 200 (application/json)

        {
          "data": [
            {
              "festivalId": 10,
              "festivalName": "Oscars",
              "festivalCountry": "Etats-Unis",
              "festivalCountryCode" : "US",
              "year": 2012,
              "awardId": 2,
              "awardName": "Oscar du meilleur film",
              "order": 2
            },
            {
              "festivalId": 7,
              "festivalName": "César",
              "festivalCountry": "France",
              "festivalCountryCode" : "FR",
              "year": 2012,
              "awardId": 3,
              "awardName": "César du meilleur film",
              "order": 3
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/contents/{id}/awards?page=2"
          }
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

## See also list [/api/contents/{id}/seealso]
Return the list of the "See Also" programs attached to the given id

+ Parameters
    + id (required, number, `2798845`) ... Numeric `id` of the Content to perform action with.

### Retrieve a content see also [GET]
+ Response 200 (application/json)

        [
        2798846,
        2798847,
        2798848,
        2798849
        ]


+ response 404 (application/json)

        {
            "errorCode":"404",
            "message":"No such resource."
        }

## Sub object list [/api/contents/{id}/subobjects]
Return the list of linked sub objects

+ Parameters
    + id (required, number, `2798845`) ... Numeric `id` of the Content to perform action with.

### Retrieve a content see also [GET]
+ Response 200 (application/json)

        [
          {
            "objectType": "UNIT",
            "contentType": "SHOW",
            "itemType": "movie",
            "titles": {
              "originalTitle": "The Artist",
              "epgTitle": "The Artist",
              "titleDivisible": "The Artist",
              "subTitleDivisible": "Film Comédie dramatique"
            },
            "synopsis": {
              "small": "En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
              "medium": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
              "large": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
            },
            "color": "0",
            "productionNationality": "France - Belgique",
            "productionYear": "2011",
            "updateDate": "2014-12-08T20:12:08.000+0000",
            "id": 585877,
            "num": 1,
            "lang": "fr",
            "version": "20141208201208",
            "ratingCSA": 1,
            "ageRange": 2,
            "duration": "100",
            "boost": 32715,
            "diffusionDate": "2012-10-05T18:55:00.000+0000"
          },
          {
            "objectType": "UNIT",
            "contentType": "SHOW",
            "itemType": "movie",
            "titles": {
              "originalTitle": "The Artist",
              "epgTitle": "The Artist",
              "titleDivisible": "The Artist",
              "subTitleDivisible": "Film Comédie dramatique"
            },
            "synopsis": {
              "small": "En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
              "medium": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
              "large": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
            },
            "color": "0",
            "productionNationality": "France - Belgique",
            "productionYear": "2011",
            "updateDate": "2014-12-08T20:12:08.000+0000",
            "id": 585878,
            "num": 1,
            "lang": "fr",
            "version": "20141208201208",
            "ratingCSA": 1,
            "ageRange": 2,
            "duration": "100",
            "boost": 32715,
            "diffusionDate": "2012-10-05T18:55:00.000+0000"
          }
        ]


+ response 404 (application/json)

        {
            "errorCode":"404",
            "message":"No such resource."
        }


# Group Identity

Identity API provide a way to get the BDDPe object from the CableLabs provider and asset id.
It provides additional information such as external content overloading.

## Get current version [/api/identity/currentVersion]
Return the current version in order to use the identity list API

### Retrieve external id list from a content id [GET]
+ Response 200 (application/json)

        11944145

## Get external ids & overload [/api/identity/edito/{bddpId}]
Return if found the list of external id registred for the given content id

+ Parameters
    + bddpId (required, string, `585877`) ... Number `bddpId` the content id

### Retrieve external id list from a content id [GET]
+ Response 200 (application/json)

        {
              "data": [
              {
                "providerId": "canal.fr",
                "assetID": "1075478_1_VR_HD_MTBD",
                "contentId": 585877,
                "version": 105189
              },
              {
                "providerId": "orange.com",
                "assetID": "THEARTISTXXW0058364Z",
                "contentId": 585877,
                "version": 134996
              }
            ],
            "paging": {
                "next": "http://127.0.0.1:8080/api/identity/edito/123456?page=2"
            }
        }

## List of external id [/api/identity/external/?version={version}&limit={limit}&page={page}]
Return the list of external id added or modified since the last given version param

### Get update [GET]

+ Parameters
    + version (required, number, `20141123101010`) ... String representing the version that will be used to filter the returned objects.
    + limit (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page (optional, number, `2`) ... The page to be returned

+ Response 200 (application/json)

        {
          "data": [
            {
              "providerId": "ANT",
              "assetID": "1081101_134",
              "contentId": 1072121,
              "version": 84252
            },
            {
              "providerId": "ANT",
              "assetID": "1081101_135",
              "contentId": 1072119,
              "version": 84253
            },
            {
              "providerId": "tvmelody.com",
              "assetID": "77515785",
              "contentId": 738178,
              "version": 84254
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/identity/external/?limit=3&page=1&version=84254",
            "nbElement": null
          }
        }


## External Id to Bddp Id [/api/identity/external/{providerId}/{assetId}]
Return if found the BDDP Id of the given id for the partner

+ Parameters
    + providerId (required, string, `orange.com`) ... Number `providerId` the provider id
    + assetId (required, string, `KITDESU0143W0084780Z`) ... String `assetId` the asset id.


### Retrieve a content from an external id [GET]
+ Response 200 (application/json)

        {
          "providerId": "canal.fr",
          "assetID": "1075478_1_VR_HD_MTBD",
          "contentId": 585877,
          "version": 105189
        }


+ response 404 (application/json)

        {
            "errorCode":"404",
            "message":"No such resource."
        }

# Group Overload

## List of overloads  [/api/overloads/?version={version}&limit={limit}&page={page}]
Return the list of overloads added or modified since the last given version param

### Get overloads [GET]

+ Parameters
    + version (required, number, `20141123101010`) ... String representing the version that will be used to filter the returned objects.
    + limit (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page (optional, number, `2`) ... The page to be returned

+ Response 200 (application/json)

        {
          "data": [
            {
              "providerId": "canal.fr",
              "assetId": "1075478_1_VR_HD_MTBD",
              "overload": {
                "objectType": null,
                "contentType": null,
                "itemType": null,
                "titles": {
                    "originalTitle": null,
                    "epgTitle": null,
                    "titleDivisible": null,
                    "titleIndivisible": null,
                    "subTitleDivisible": null
                },
                "medias": [],
                "color": null,
                "productionNationality": null,
                "productionNationalityCode": [],
                "productionYear": null,
                "updateDate": null,
                "creationDate": null,
                "synopsis": "Surcharge données de base. The Artist",
                "mediumSynopsis": null,
                "longSynopsis": null,
                "id": null,
                "parentId": null,
                "num": null,
                "members": null,
                "partners": null,
                "tagsByType": null,
                "totalEpisode": null,
                "subObject": null,
                "lang": "fr",
                "version": null,
                "awards": null,
                "ratingCsa": null,
                "data": null
              },
              "version": "20141215083759"
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/overloads/?limit=1&page=1&version=20141215083759",
            "nbElement": null
          }
        }

## By external id [/api/overloads/external/{providerId}/{assetId}]
Return the overload defined for the given external id

+ Parameters
    + providerId (required, string, `orange.com`) ... Number `providerId` the provider id
    + assetId (required, string, `KITDESU0143W0084780Z`) ... String `assetId` the asset id.

### Retrieve an overload [GET]
+ Response 200 (application/json)


        {
          "providerId": "orange.com",
          "assetId": "THEARTISTXXW0058364Z",
          "contentId": 585877,
          "overload": {
            "titles": {},
            "synopsis": "Surcharge données de base. The 2",
            "lang": "fr"
          },
          "version": "20131215083759",
          "deleted": false
        }



+ response 404 (application/json)

        {
            "errorCode":"404",
            "message":"No such resource."
        }

## By content id [/api/overloads/edito/{contentId}]
Return the list of overload defined for the given content id

+ Parameters
    + contentId (required, biginteger, `585877`) ... Number `contentId` the content id

### Retrieve overloads [GET]
+ Response 200 (application/json)



        {
          "data": [
          {
            "providerId": "orange.com",
            "assetId": "THEARTISTXXW0058364Z",
            "contentId": 585877,
            "overload": {
              "titles": {},
              "synopsis": "Surcharge données de base. The 2",
              "lang": "fr"
            },
            "version": "20131215083759",
            "deleted": false
          }
        ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/overloads/edito/123456?page=2"
          }
        }   
        
## Manage overloads [/api/overloads/edito/{contentId}/{providerId}/{assetId}]

+ Parameters
    + id (required, number, `2798845`) ... Numeric `id` of the Content to perform action with.
    + providerId (required, string, `ATG`) ... String `providerId` representing the provider.
    + assetId (required, string, `serie_cat110340249`) ... String `assetId` representing the broadcast id.


### Add a new overload fo the given content [PUT]

Add an overload for the content.

+ Request (application/json)

        {
            "providerId": "ATG",
            "assetId": "serie_cat110340248",
            "contentId": 4602933,
            "overload": {
            "titles": {},
            "synopsis": {},
            "lang": "fr",
            "data": {
                "itemType": "season",
                "id": "serie_cat110340248"
            },
            "version": "20150306132434",
            "deleted": false
        }

+ Response 201 (application/json)


### Delete an overload [DELETE]

Delete an overload for the content.

+ Response 200 (application/json)

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

# Group Search

This API provide search facilities

## Lists [/api/search/list?limit={limit}&page={page}]
Search for lists

+ Parameters
    + limit (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page (optional, number, `2`) ... The page to be returned

### Get lists [GET]
+ Response 200 (application/json)

        {
          "data": [
            {
              "objectType": "LIST",
              "contentType": "AUTRE",
              "itemType": "SHOW",
              "titles": {
                "epgTitle": "Séries & fictions1",
                "titleDivisible": "Séries & fictions1",
                "subTitleDivisible": "Divertissement"
              },
              "synopsis": {},
              "updateDate": "2015-02-05T09:48:10.000+0100",
              "id": 4712800,
              "lang": "fr",
              "version": "20150205084810",
              "ratingCSA": 4,
              "duration": "0",
              "boost": 1,
              "data": {
                "itemType": "list",
                "id": "6Play_chaine_M6_Series&Fictions",
                "revision": 1416850656184,
                "title": "Séries & fictions1",
                "creationDate": "2014-02-20",
                "ratingCSA": 4,
                "ageRange": 2,
                "idKey": "6Play_chaine_M6_Series&Fictions",
                "tags": [
                  {
                    "type": "CLASSIFICATION",
                    "name": "Csat_CornerChaine_M6",
                    "displayName": "Csat_CornerChaine_M6"
                  }
                ],
                "channel": {
                  "itemType": "externalChannel",
                  "id": "M6"
                },
                "maxResult": 2000,
                "rules": [
                  {
                    "id": "10100006",
                    "itemType": "searchRule",
                    "maxResult": 2000,
                    "query": "tags_CLASSIFICATION:\\/6Play\\/Chaines\\/M6\\/6Play\\ \\-\\ Séries&Fictions* AND (itemType:movie OR itemType:serie OR itemType:season)"
                  }
                ]
              }
            }
          ],
          "paging": {
            "previous": "http://172.30.95.200:8080/api/search/list?Authorization=4ADD57713B2E8C2151C42E3D7D326&limit=1&page=1",
            "next": "http://172.30.95.200:8080/api/search/list?Authorization=4ADD57713B2E8C2151C42E3D7D326&limit=1&page=3"
          }
        }

# Group Bulk
In order to perform the same operation on multiple object we provide a Bulk API with these operations :

- See also
- Overload

## See also [/api/bulk/seealso]
Return the seealso information for the given list of content id

### Get see also [POST]
Return the seeAlso for the given content id list. If a given content id is not found it will not appear in the response structure.

+ Request (application/json)

        [4431342,4431343]

+ Response 200 (application/json)

        {
          "4431342": [
            4408701,
            2971485
          ],
          "4431343": [
            4408701,
            2971485
          ]
        }

## Overload [/api/overloads/bulk/external]
Return the seealso information for the given list of content id

### Get overloads [POST]
Return the overloads for the given content id list. If a given content id is not found it will not appear in the
response structure.

+ Request (application/json)


        [
            {
                "providerId": "ATG",
                "assetId": "serie_cat110340248"
            },
            {
                "providerId": "ATG",
                "assetId": "serie_cat110340249"
            }
        ]
    
+ Response 200 (application/json)
    
        [
            {
                "providerId": "ATG",
                "assetId": "serie_cat110340248",
                "contentId": 4602933,
                "overload": {
                "titles": {},
                "synopsis": {},
                "lang": "fr",
                "data": {
                "itemType": "season",
                "id": "serie_cat110340248"
            },
                "version": "20150306132434",
                "deleted": false
            },
            {
                "providerId": "ATG",
                "assetId": "serie_cat110340249",
                "contentId": 4602934,
                "overload": {
                "titles": {},
                "synopsis": {},
                "lang": "fr",
                "data": {
                "itemType": "season",
                "id": "serie_cat110340248"
            },
                "version": "20150306132435",
                "deleted": false
            },
        ]

# Group Channel

The Channel API provides edito on channels. 
Channel are created by SIP+ who provide basic informations. Other user are allowed to update some basic field like `name` and `shortName`.


## Types list [/api/channels/types]

Retrieve channel types list

### Channel types list [GET]
+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": 1,
                    "wording": "Chaîne",
                    "active": true
                },
                {
                    "id": 2,
                    "wording": "Radio",
                    "active": true
                },
                {
                    "id": 3,
                    "wording": "Chaîne événementielle",
                    "active": true
                },
                {
                    "id": 4,
                    "wording": "Chaîne technique",
                    "active": true
                }
            ],
            paging: { }
        }



## Channels list [/api/channels]

Retrieve channels list

### Channel list [GET]
+ Response 200 (application/json)

        {
          "data": [
            {
                "id": 943,
                "name": "FR3 VIA STELLA",
                "shortName" : "FR3",
                "type": 1,
                "definition": "SD",
                "beginDate": "2013-06-25T10:42:08.000+0000",
                "creationDate": "2013-06-25T10:42:08.000+0000",
                "lastUpdate": "2015-04-02T07:40:45.000+0000",
                "isMaster": true
            },
            {
                "id": 158,
                "name": "FUN",
                "shortName" : "FR3",
                "type": 2,
                "definition": "SD",
                "beginDate": "2013-06-25T10:42:08.000+0000",
                "creationDate": "2013-06-25T10:42:08.000+0000",
                "lastUpdate": "2013-07-11T16:59:59.000+0000",
                "isMaster": true
                }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/channels/?page=2"
          }
        }

## Channel [/api/channels/{id}]

When `id` is given, the operation target a single channel corresponding to this id.
+ Parameters
  + id (required, number, `56379`) ... Numeric `id` of the channel.


### Retrieve a channel [GET]
Return a single channel object

+ Response 200 (application/json)


        {
            "id": 943,
            "name": "FR3 VIA STELLA",
            "shortName" : "FR3",
            "type": 2,
            "definition": "SD",
            "beginDate": "2013-06-25T10:42:08.000+0000",
            "creationDate": "2013-06-25T10:42:08.000+0000",
            "lastUpdate": "2015-04-02T07:40:45.000+0000",
            "isMaster": true
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

### Update a Channel [PUT]

Update or create a channel object.


+ Request (application/json)

        {
            "id" : 943,
            "name": "FR3 VIA STELLA",
            "shortName" : "FR3",
            "type": 2,
            "definition":"HD",
            "beginDate":"2013-06-25T10:42:08.000+0000",
            "endDate": "2016-12-14T00:00:00.000+0100",
            "master": 345
        }

+ Response 200 (application/json)

+ Response 201 (application/json)

+ response 400 (application/json)

        {
          "errorCode": "400",
          "message": "Reason"
        }

## Media list [/api/channels/{id}/media]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the channel.

### Retrieve channel media [GET]
+ Response 200 (application/json)

        {
           "data":[
                {
                  "type": "IMAGE",
                  "height": 272,
                  "width": 352,
                  "format": "image/jpeg",
                  "name": "STD_298296.jpg",
                  "imgType": "STD",
                  "rank": 1,
                  "id": 191281,
                  "updateDate": "2012-09-10T21:44:25.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 394,
                  "width": 700,
                  "format": "image/jpeg",
                  "name": "169_298296.jpg",
                  "imgType": "STD169",
                  "rank": 1,
                  "id": 191284,
                  "updateDate": "2013-09-23T12:07:47.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 600,
                  "width": 800,
                  "format": "image/jpeg",
                  "name": "ANT_1075478_1_804.jpg",
                  "imgType": "STD",
                  "rank": 1,
                  "id": 291889,
                  "updateDate": "2012-10-05T17:33:41.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 576,
                  "width": 1024,
                  "format": "image/jpeg",
                  "name": "ANT_1075478_1_412.jpg",
                  "imgType": "STD169",
                  "rank": 1,
                  "id": 291893,
                  "updateDate": "2012-10-05T17:33:41.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 426,
                  "width": 964,
                  "format": "image/jpeg",
                  "name": "MEA_28153194_298288.jpg",
                  "imgType": "MEAEUREKA",
                  "rank": 1,
                  "id": 12652568,
                  "updateDate": "2014-09-26T18:13:43.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 426,
                  "width": 964,
                  "format": "image/jpeg",
                  "name": "MEA_28153194_298288.jpg",
                  "imgType": "MEASOIR",
                  "rank": 1,
                  "id": 12652568,
                  "updateDate": "2014-09-26T18:13:43.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 360,
                  "width": 1400,
                  "format": "image/jpeg",
                  "name": "05_10_theartiste.jpg",
                  "imgType": "CARWEB",
                  "rank": 1,
                  "id": 12752996,
                  "updateDate": "2014-09-29T12:19:57.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                }
            ],
            "paging": {
                "previous": null,
                "next": "http://127.0.0.1:8080/api/channels/{id}/media?page=2"
            }
        }
          
          
## Media [/api/channels/{idChannel}/media/{idMedia}]

+ Parameters
  + idChannel (required, number, `1`) ... Numeric `id` of the channel.
  + idMedia (required, number, `1`) ... Numeric `id` of the media.

### Retrieve a channel media [GET]
+ Response 200 (application/json)

            {
              "type": "IMAGE",
              "height": 272,
              "width": 352,
              "format": "image/jpeg",
              "name": "STD_298296.jpg",
              "imgType": "STD",
              "rank": 1,
              "id": 191281,
              "updateDate": "2012-09-10T21:44:25.000+0000",
              "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

### Add or update a Channel [PUT]

Update or create a channel media object.

+ Request (application/json)

        {
            "type": "IMAGE",
            "height": 272,
            "width": 352,
            "format": "image/jpeg",
            "name": "STD_298296.jpg",
            "imgType": "STD",
            "rank": 1,
            "id": 191281,
            "updateDate": "2012-09-10T21:44:25.000+0000",
            "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
        }

+ Response 200 (application/json)

### Remove a media from the channel [DELETE]

Remove a media object from a channel.

+ Response 200 (application/json)

# Group Partner

Provide partner identity information

## Partner [/api/partners/{id}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the partner.

### Retrieve a partner [GET]
+ Response 200 (application/json)

        {
          "id" : 1,
          "name" : "CANAL+",
          "enabled" : true,
          "updateDate" : "2015-01-19T20:18:12.000+0100"
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

# Group Jobs

Provide jobs information

## List [/api/jobs/]

Return the list of jobs.

### Retrieve jobs list [GET]
+ Response 200 (application/json)

        {
           "data":[
              {
                "id": 1,
                "name": "Invité",
                "rank": 10,
                "prefix": "Invités : ",
                "updateDate": "2015-01-19T20:18:12.000+0100"
              },
              {
                "id": 2,
                "name": "Acteur",
                "rank": 12,
                "prefix": "Avec : ",
                "updateDate": "2015-01-19T20:18:12.000+0100"
              }
            ],
            "paging": {
                "previous": null,
                "next": "http://127.0.0.1:8080/api/jobs?page=2"
            }
        }

## Job [/api/jobs/{id}]

Return specified job.

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the job.


### Retrieve a job from its id [GET]
+ Response 200 (application/json)

          {
            "id": 1,
            "name": "Invité",
            "rank": 10,
            "prefix": "Invités : ",
            "updateDate": "2015-01-19T20:18:12.000+0100"
          }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

# Group Tags

A tag is used to define a common characteristic. We provide 4 types of tags :

- GENRE_CANAL
- SOUS_GENRE_CANAL
- EDUCTION
- MOTCLE
- TAG

## Types list [/api/tags/?limit={limit}&page={page}]

+ Parameters
    + limit (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page (optional, number, `2`) ... The page to be returned
    
### Retrieve tag types [GET]
+ Response 200 (application/json)
        
        {
          "data": [
            {
              "type": "GENRE_CANAL"
            },
            {
              "type": "SOUS_GENRE_CANAL"
            },
            {
              "type": "EDUCATION"
            },
            {
              "type": "MOTCLE"
            },
            {
              "type": "TAG"
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/tags?page=2"
          }
        }


## Tags list [/api/tags/{type}]

Return the list of tags for the given type.

### Retrieve tags for a type [GET]
+ Response 200 (application/json)

        {
          "data": [
            {
              "id": 1,
              "label": "Cinéma"
            },
            {
              "id": 2,
              "label": "Documentaire"
            }
          ],
          "paging": {
            "next": "http://127.0.0.1:8080/api/tags/GENRE?page=2"
          }
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

### Add a tag [POST]

Add a new tag. Only for EDUCATION and MOTCLE.

+ Request (application/json)

        {
          "label": "Cinéma"
        }

+ Response 200 (application/json)

  + Headers

            Location: /api/tags/EDUCATION/69

+ Response 400 (application/json)        

## Tag [/api/tags/{type}/{id}]

Manage the specified tag

### Retrieve a tag [GET]
+ Response 200 (application/json)

        {
          "id": 1,
          "label": "Cinéma"
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }


## Sub tags [/api/tags/{type}/{id}/childs]

Return the sub tags
### Return the sub tags [GET]

+ Response 200 (application/json)

        {
           "data":[
                {
                    "id": 1,
                    "name": "Film Action",
                    "rank": 1,
                    "filter": "FILM ACTION-AVENTURE",
                    "updateDate": "2015-01-19T20:18:12.000+0100"
                },
                {
                    "id": 2,
                    "name": "Film Aventure",
                    "rank": 3,
                    "filter": "FILM ACTION-AVENTURE",
                    "updateDate": "2015-01-19T20:18:12.000+0100"
                }
            ],
            "paging": {
                "next": "http://127.0.0.1:8080/api/tags/{type}/{id}/childs?page=2"
            }
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

# Group People

Every human being in the world can be found using this API. Yes you too !

## List [/api/people]

Return the list of people.

### Retrieve people [GET]
+ Response 200 (application/json)

        {
          "data" : [ {
            "lastName" : "lastName",
            "firstName" : "firstName",
            "id" : 1,
            "version" : "20131024125207"
          } ],
          "paging" : {
            "next" : "http://localhost:9998/people?page=2"
          }
        }

## People [/api/people/{id}]

Return the specified people detail

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the people.


### Retrieve people [GET]
+ Response 200 (application/json)

          {
            "lastName" : "lastName",
            "firstName" : "firstName",
            "id" : 1,
            "version" : "20131024125207"
          }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

# Group Media

A media is a image or a video that can be linked with people, content, channels... A media can exist without the need to be linked to a people or a content...
Each object that accept media provide a `/media/{mediaId}` method used to link or unlink the object and a media

## Media [/api/media]

Return the list of media. A media could be an `IMAGE` or a `VIDEO`. 
The exposed url should be used to retrieve the content

Provided image type are :

|   imgType    |
|--------------|
| CARWEB       |
| STD          |
| STD169       |
| MEASOIR      |
| MEAVOD       |
| PIVOT        |
| BA           |
| CPLAY        |
| MEANL        |
| MEAEUREKA    |


### Retrieve media list [GET]
+ Response 200 (application/json)

        {
          "data": [
            {
              "type": "IMAGE",
              "height": 272,
              "width": 352,
              "format": "image/jpeg",
              "name": "STD_298296.jpg",
              "imgType": "STD",
              "rank": 1,
              "id": 191281,
              "updateDate": "2012-09-10T21:44:25.000+0000",
              "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            },
            {
              "type": "IMAGE",
              "height": 272,
              "width": 352,
              "format": "image/jpeg",
              "name": "STD_298296.jpg",
              "imgType": "STD",
              "rank": 1,
              "id": 191281,
              "updateDate": "2012-09-10T21:44:25.000+0000",
              "url" : "http://127.0.0.1/api/media/191281/file/2013-12-26T08:05:32Z.jpg"
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/media/?page=2"
          }
        }

### Add media [POST]

+ Request (application/json)

        {
          "type": "IMAGE",
          "height": 272,
          "width": 352,
          "format": "image/jpeg",
          "name": "STD_298296.jpg",
          "imgType": "STD",
          "rank": 1,
          "id": 191281,
          "updateDate": "2012-09-10T21:44:25.000+0000",
          "url" : "http://127.0.0.1/api/media/191281/file/2013-12-26T08:05:32Z.jpg"
        }

+ Response 200 (application/json)

  + Headers

            Location: /api/media/2

## Media [/api/media/{id}]

Bring media update capacities

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the media.


### Retrieve media [GET]

+ Response 200 (application/json)

        {
          "type": "IMAGE",
          "height": 272,
          "width": 352,
          "format": "image/jpeg",
          "name": "STD_298296.jpg",
          "imgType": "STD",
          "rank": 1,
          "id": 191281,
          "updateDate": "2012-09-10T21:44:25.000+0000",
          "url" : "http://127.0.0.1/api/media/191281/file/2013-12-26T08:05:32Z.jpg"
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

### Delete media [DELETE]

A media can by deleted only if there is no existing link with an object

+ Response 200 (application/json)

+ response 403 (application/json)

        {
          "errorCode": "403",
          "message": "Reason"
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

## Media file [/api/media/{id}/file]

Requirements :
- Maximum upload file size : 20 Mb
- Accepted media MIME types: no limitation on media type

The HTTP headers to use when making a simple upload request include:
- `Content-Type` : Set to one of the method's accepted upload media data types, specified in the API reference.
- `Content-Length` : Set to the number of bytes you are uploading.


The media file can be retrieved or uploaded using these methods

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the media.

### Get media file [GET]

+ Response 200 (application/json)

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

### Upload media file [PUT]

+ Response 201 (application/json)

+ Response 204 (application/json)

# Group Events

An event represent a situation in with a list of content can be linked. It can be a academy awards, a music festival, a sport competition, ...

## Events [/api/events]

Return the list of events.

### Retrieve events [GET]
+ Response 200 (application/json)

        {
          "data": [
            {
              "id": 10,
              "name": "Oscars",
              "country": "Etats-Unis",
              "countryCode" : "US"
            },
            {
              "id": 7,
              "name": "César",
              "country": "France",
              "countryCode" : "FR"
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/events/?page=2"
          }
        }
        
## Events date [/api/events/{eventId}]

Return the list of event occurence date.

+ Parameters
    + eventId (required, number, `1`) ... Numeric `id` of the event.


### Retrieve happening date [GET]
+ Response 200 (application/json)

        {
          "data": [
            {
              "year": 2010
            },
            {
              "year": 2011
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/events/{eventId}?page=2"
          }
        }

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }
        
## Events rewards [/api/events/{eventId}/{year}/rewards]

Return the list of rewards delivered. An event could be a music festival, academy awards, ...

+ Parameters
    + eventId (required, number, `1`) ... Numeric `id` of the event.
    + year (required, number, `2011`) ... Numeric `id` of the year.


### Retrieve events [GET]
+ Response 200 (application/json)

        {
          "data": [
            {
                "id": 3,
                "name": "César du meilleur film",
            },
            {
                "id": 4,
                "name": "César du meilleur acteur",
            }
          ],
          "paging": {
            "previous": null,
            "next": "http://127.0.0.1:8080/api/events/{eventId}/{year}/rewards"
          }
        }        

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

## Rewarded contents [/api/events/{eventId}/{year}/rewards/{rewardId}]

Return the list of events. An event could be a music festival, academy awards, ...

+ Parameters
    + eventId (required, number, `1`) ... Numeric `id` of the event.
    + year (required, number, `2011`) ... Numeric `id` of the year.
    + rewardId (required, number, `1`) ... Numeric `id` of the reward.

### Retrieve events [GET]
+ Response 200 (application/json)

        [
          {
            "objectType": "UNIT",
            "contentType": "SHOW",
            "itemType": "movie",
            "titles": {
              "originalTitle": "The Artist",
              "epgTitle": "The Artist",
              "titleDivisible": "The Artist",
              "subTitleDivisible": "Film Comédie dramatique"
            },
            "synopsis": {
              "small": "En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
              "medium": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
              "large": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
            },
            "color": "0",
            "productionNationality": "France - Belgique",
            "productionYear": "2011",
            "updateDate": "2014-12-08T20:12:08.000+0000",
            "id": 585877,
            "num": 1,
            "lang": "fr",
            "version": "20141208201208",
            "ratingCSA": 1,
            "ageRange": 2,
            "duration": "100",
            "boost": 32715,
            "diffusionDate": "2012-10-05T18:55:00.000+0000"
          },
          {
            "objectType": "UNIT",
            "contentType": "SHOW",
            "itemType": "movie",
            "titles": {
              "originalTitle": "The Artist",
              "epgTitle": "The Artist",
              "titleDivisible": "The Artist",
              "subTitleDivisible": "Film Comédie dramatique"
            },
            "synopsis": {
              "small": "En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
              "medium": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
              "large": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
            },
            "color": "0",
            "productionNationality": "France - Belgique",
            "productionYear": "2011",
            "updateDate": "2014-12-08T20:12:08.000+0000",
            "id": 585878,
            "num": 1,
            "lang": "fr",
            "version": "20141208201208",
            "ratingCSA": 1,
            "ageRange": 2,
            "duration": "100",
            "boost": 32715,
            "diffusionDate": "2012-10-05T18:55:00.000+0000"
          }
        ]
        

+ response 404 (application/json)

        {
          "errorCode": "404",
          "message": "Reason"
        }

# Group API Status

This API provides basic monitoring status

## Status [/api/_status]

Basic health check

### Retrieve status [GET]
+ Response 200 (application/json)

        {
          "version": "1.0.3-SNAPSHOT 2015/04/15 01:34:15 PM,UTC",
          "dbVersion": "1.16.22",
          "dbOk": true,
          "processorsOk": true,
          "globalStatus": true,
          "serverName": "frcp03vdv0274"
        }