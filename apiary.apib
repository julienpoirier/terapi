FORMAT: 1A

# BDDPe
Provides the editorial data

- TODO: provide search and filtering and pagination in lists
- TODO: REST filtering
- TODO: url path media: remove and add url instead
- TODO: members changer order en rank

## Security
Access is controlled using a security token. The token can be passed using `Session-Token` HTTP Header.

## Date
All dates are represented by [ISO_8601](http://en.wikipedia.org/wiki/ISO_8601)

## Country 
All countries codes are represented by [ISO_3166-1](http://www.iso.org/iso/country_codes.htm)

## Authentication
Currently the API provides only a basic http authentication. Please refer to the config file of the Data API to retrieve a valid account.

## Basic usage
This API is RESTfull and uses the following methods as described:

| Method | Usage                                 |
| ------ | ------------------------------------- |
| POST   | To create a resource                  |
| GET    | Get a resource or a list of resources |
| PUT    | To update a resource                  |
| DELETE | To delete resource                    |

## Description of usual Server Responses
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used for API responses.

* Successful `GET` and `PUT` request will return `200` status code.
* Successful `POST` request will return `201` status code, with a header `Location` to the new ressource
* Successful `DELETE` request will return `204`status code.

Error messages will use `4xx` status codes and will provide a description of the error:

* `404`: Missing Page
* `403`: Forbidden
* `406`: Miss a required field
* `400`: Bad Data

For instance:

```
HTTP Status Code: 403
{"message":"Param Update Forbidden","code": 20003}
```

In which case do we have a 404 or 204
- `404` are returned when the id is not found. For example, when calling `/api/contents/2` if no content with the id 2 is found.
- `204` are returned when the main id is found but there is no data for this action. For example, calling `/api/contents/2/media` will return a 204 if no media are linked with the content. In this case, the content with ID = 2 exists.

## Caching
API is compatible with Entity Tag `ETAG` and the request header `If-Modified-Since`.

## Pagination
All `GET` requests on collection of objects can use `pagination`. You can add `page` and `limit` parameters to the query string to retrieve specific contents by using the pager. For example:
> ?page=2&limit=10

Here are the parameters you'll retrieve in a paginated response:

| Properties                            | Links                         | Embedded relations                    |
|---------------------------------------|-------------------------------|---------------------------------------|
| *page*: The current page of the pager | *self*: Current pager         | *data*: List of items in the pager |
| *limit*: Number of elements per page  | *prev*: Previous page         |                                       |
| *pages*: Total number of pages        | *next*: Next page             |                                       |
| *total*: Total number of elements     | *first*: First page of pager  |                                       |
|                                       | *last*: Last page             |                                       |

For bulk requests, default values are: page = `1`, limit = `300`.
For all other requests, default values are: page = `1`, limit = `10`.

## Content structure
Return the list of contents

### Localisation
-------------------------------

The API is HTTP `Accept-Language` header aware. If not given, french content will be returned.
In case of multiple accepted languages, the response structure will be adapted.

### CSA Ratings
-------------------------------

Here is the mapping of the CSA code:

* 1 <=> `-10`
* 2 <=> `-12`
* 3 <=> `-16`
* 4 <=> `-18`

Note - [CSA official reference](http://csa.fr/Television/Le-suivi-des-programmes/Jeunesse-et-protection-des-mineurs/La-signaletique-jeunesse)

### Global structure
-------------------------------

Here is a mapping between ATG `getContent` response field, BDDPE XML web services and the current operation mapping.
In order to minimize the number of field present in response some ATG Field had been replaced like `showTitle` that is now `titles.title`

Type availability | Description
----------------- | -----------
E                 | episode
P                 | program
M                 | movie
C                 | collection
S                 | show
F                 | person (figure)


Mapping between ATG output and BDDP Xml service:


REST Name  | REST Availability  | ATG Name          | ATG availability| Bddpe XML Name
:----------------:| ---------------- | -------------- | :--------: | -----------------
 itemType | E,P,M,S,C,F|itemType  |  E,P,M,S,C|programme.type
 id | E,P,M,S,C,F|id  | E,P,M|programme.identifiant
 titles.title | E,P,M,S,C|title  | E,P,M| programme.titre
titles.subTitle | E,P,M,S,C|-|-|programme.listetitres.SOUS_TITRE_LABELLISE_PART1
 titles.originalTtitle | E,P,M,S|-|-|programme.titreoriginal
titles.epgTitle | E,P,M,S,C|-|-|programme.listetitres.TITRE_EPG
 accroche | E,P,M,S,C|accroche  | E,P,M| programme.listedescriptifs.TXTCOURT
 longAccroche | E,P,M,S,C|longAccroche  | E| programme.listedescriptifs.TXTLONG
 creationDate | E,P,M,S,C|~~creationDate~~  | E,P,M| programme.datepremierediffusionlive
 tagsByType | E,P,M,S,C|tags | E,P,M|listegenres, listethematiques, listeinformationscomplementaires
 synopsis | E,P,M,S,C|synopsis  | E,P,M|programme.listedescriptifs.RESUMECOURT
isColor|E,P,M,C,S|-|-|programme.couleur
mediumSynopsis | E,P,M,S,C|-|-|programme.listedescriptifs.RESUMEMOYEN
 longSynopsis| E,P,M,S,C|longSynopsis  | E,P,M|programme.listedescriptifs.RESUMELONG
productionNationality| E,P,M,S|productionNationality  | E,P,M|programme.nationalite
productionYear| E,P,M,S|productionYear  | E,P,M|programme.annee
[members](#level-1-member)| E,P,M|members | E,M|listepersonnes
 -| -|showTitle  | P|listepacks.libelle
 num| E,P,M|numEpisode  | E|programme.episode
 updateDate| E,P,M,S,C|publicationDate  | E|programme.datemaj
 parentId| E,P,M,S,C|parentId | E| listepacks.identifiant
 [partners](#level-1-partners)| E,P,M,S|comments|-|listeinformationscomplementaires.PARTENAIRES
 [medias](#level-1-media)| E,P,M,S,C|-|-|listemedia
 [person](#level-1-person)| F|-|-|-
 [subobjects](#level-1-subject)| S,C|-|-|-
 [awards](#level-1-awards)| E,P,M,S,C|-|-|-
 version | E,P,M,S,C|-|-|-

<a id="level-1-media"></a>
### Media structure
-------------------------------

This section describe the mapping of members entries. Each member are stored under their function. The liste is also ordored using the function natural rank, and member rank.

ATG Name          | ATG availability | Bddpe XML Name | REST Name
:----------------:| ---------------- | -------------- | :--------:
-|-|media.type|type
-|-|media.hauteur|height
-|-|media.largeur|width
-|-|media.format|format
-|-|media.nom|name
-|-|media.type|imgType
-|-|media.copyright|copyright
-|-|media.rang| rank
-|-|media.identifiant| id
-|-|media.datemaj|updateDate
-|picture|-|path
Example :

```json
{
    "type": "media_image",
    "height": 270,
    "width": 480,
    "format": "image/jpeg",
    "name": "169_48012.jpg",
    "imgType": "STD169",
    "copyright": "Skull Distribution",
    "rank": 1,
    "id": 40420,
    "updateDate": "2013-12-26T08:05:32Z",
    "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
}
```

<a id="level-1-member"></a>
### Member structure
-------------------------------


This section describe the mapping of members entries. Each member are stored under their function. The liste is also ordored using the function natural rank, and member rank.

ATG Name          | ATG availability | Bddpe XML Name | REST Name  |
:----------------:| ---------------- | -------------- | :--------: |
function|E,P,M|listepersonnes.personnes.fonction|function
prefix|E,P,M|listepersonnes.prefix|prefix
rank|E,P,M|listepersonnes.personnes.rang|rank
lastName |E,P,M|listepersonnes.personnes.nom|persons[].lastName
firstName|E,P,M|listepersonnes.personnes.prenom|persons[].firstName
rank|E,P,M|listepersonnes.personnes.rang|persons[].rank
id|E,P,M|listepersonnes.personnes.identifiant|persons[].id
-|-|-|persons[].awards

Example :

```json
"members": {
      "2": {
        "id": 2,
        "function": "Acteur",
        "rank": 12,
        "prefix": "Avec : ",
        "persons": [
          {
            "lastName": "Reeves",
            "firstName": "Keanu",
            "rank": 1,
            "id": 21123,
            "awards": [
              {
                "festivalId": 10,
                "festivalName": "Oscars",
                "festivalCountry": "Etats-Unis",
                "festivalCountryCode" : "US",
                "festivalPlace": null,
                "year": 2012,
                "awardId": 8,
                "awardName": "Oscar du meilleur acteur",
                "order": 8
              }
          }
        ]
      },
      "4": {
        "id": 4,
        "function": "Réalisateur",
        "rank": 1,
        "prefix": "De : ",
        "persons": [
          {
            "lastName": "Wachowski",
            "firstName": "Andy",
            "rank": 1,
            "id": 25198
          }
        ]
      }
```

<a id="level-1-partners"></a>
### Partners structure
-------------------------------

This section describe the structure of partner entries which group partner opinions. Historically these data were stored under the `informationcomplementaire` of XML.

ATG Name          | ATG availability | Bddpe XML Name | REST Name  |
:----------------:| ---------------- | -------------- | :--------: |
-|-|nompartenaire| name
-|-|identifiant|id
-|-|nomnote|opinions[].type
-|-|note|opinions[].rating
-|-|recommende|opinions[].recommended

Example :

```json
"partners": {
    "20": {
    "name": "Allociné",
    "id": 20,
    "opinions": [
        {
        "type": null,
        "rating": 3.5,
        "name": null,
        "recommended": false,
        "opinion": null
        }
    ]
}

```
<a id="level-1-awards"></a>
### Awards structure
-------------------------------

This section describe the structure of awards entries.

ATG Name          | ATG availability | Bddpe XML Name | REST Name  |
:----------------:| ---------------- | -------------- | :--------: |
-|-|-|opinions[].festivalId
-|-|-|opinions[].festivalName
-|-|-|opinions[].festivalCountry
-|-|-|opinions[].festivalPlace
-|-|-|opinions[].year
-|-|-|opinions[].awardId
-|-|-|opinions[].awardName
-|-|-|opinions[].order

Example :


```json
        "awards" : [{
            "festivalId": 7,
            "festivalName": "César",
            "festivalCountry": "France",
            "festivalCountryCode" : "FR",
            "festivalPlace": null,
            "year": 2012,
            "awardId": 9,
            "awardName": "César du meilleur réalisateur",
            "order": 9
          }]
```

### List structure
-------------------------------

Today lists come from ATG. The ATG object could be found under the `data` key. If during the import phase children are found attached to a common BDDP object we provide the `parentId`.

```json
        {
          "objectType": "PACK",
          "contentType": "LIST",
          "itemType": "LIST",
          "id": -32404,
          "parentId": 4443353,
          "version": "20141222083339",
          "data": {
            "itemType": "season",
            "id": "8100842",
            "children": [
              "ANT_1163791_6",
              "ANT_1163791_8",
              "ANT_1163791_10",
              "ANT_1163791_16",
              "ANT_1163791_11",
              "ANT_1163791_7",
              "ANT_1163791_13",
              "ANT_1163791_2",
              "ANT_1163791_9",
              "ANT_1163791_17",
              "ANT_1163791_12",
              "ANT_1163791_5",
              "ANT_1163791_4",
              "ANT_1163791_18",
              "ANT_1163791_1",
              "ANT_1163791_3",
              "ANT_1163791_14",
              "ANT_1163791_15"
            ],
            "revision": 1415366598647
          }
        }
```

# Group Security

A security token is needed in order to access to the API. A master token will be provided. Using this token you will be able to call the session token to retrieve one of them. A session token is valid during 10 minutes and should be renew.


## Session token [/api/security/token/session/{masterToken}]

Return a valid token that can be used to query the API

+ Parameters
    + masterToken ( required, string, `RETFGDFGTRHDFGDFGF`) ... Your master token.
    

### New session token [GET]

Return a new session token

+ Response 200 (application/json)
    + Body

            {
              "sessionToken" : "RETFGDFGTRHDFGDFGF",
              "validUntil" : "2012-08-03T19:16:06.000+0000"
            }

+ Response 403 (application/json)        

# Group Content

Each content is typed using two fields. The first is `objectType` and should be used to determine what kind of object we're dealing with. Then `contentType` will be used to get an editorial kind of what is in the content.

Each object is typed using `objectType` field. This value should be used to known how to act with the current object :

- `BRAND`: Represent a brand. No parent is defined.
- `SEASON`: Represent a season. The `SEASON` parent is a `BRAND`.
- `UNIT`: Every content that don't have child or parent relation.
- `LIST`: BDDP Pack and Part. Should be refactored in the future.
- `PACK `: ATG Imported list.

In addition, is provided the content type `contentType`:

- `FILM`: Movie
- `SERIE`: Brand
- `DESSINANIME`: Animation
- `MAGAZINE`: Magazine
- `CONCERT`: Music
- `THEATRE`: Theater
- `SPORT`: Sport
- `DOCUMENTAIRE`: Documentary
- `AUTRE`: Other
- `SHOW`: Show
- `SEASON`: Season

For an UI purpose, a third attribute is exposed `itemType`. In V1 the value is automatically computed based on the `objectType`, the `contentType` and the attached object (parent, child):

- `LIST`
- `BRAND`
- `SEASON`
- `SHOW`
- `MOVIE`
- `EPISODE`
- `PROGRAM`

## Content list [/api/contents?version={version}&limit={limit}&page={page}&full={full}]

### Get contents [GET]

+ Parameters
    + version (required, number, `20141123101010`) ... String representing the version that will be used to filter the returned objects.
    + limit = `10` (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned
    + full = `false` (optional, boolean, `true`) ... Ask for full objects or not

+ Request (application/json)

    + Body

            {
                "version": 20141123101010,
                "page": 1,
                "limit": 10,
                "full": true,
            }

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "objectType": "UNIT",
                        "contentType": "SPORT",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "Côté Match",
                            "titleDivisible": "Côté Match"
                        },
                        "synopsis": {
                            "small": "Football.",
                            "large": "Football."
                        },
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96579,
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 2,
                                    "label": "Sport"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 61,
                                    "label": "Mag. Football"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 1,
                        "boost": 1
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "MAGAZINE",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "Image du jour",
                            "titleDivisible": "Image du jour : JO de Londres"
                        },
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96568,
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 2,
                                    "label": "Sport"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 62,
                                    "label": "Mag. Sport"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 5,
                        "boost": 1
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "MAGAZINE",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "Mon rêve, ma ",
                            "titleDivisible": "Mon rêve, ma médaille"
                        },
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96574,
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 2,
                                    "label": "Sport"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 62,
                                    "label": "Mag. Sport"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 1,
                        "boost": 1
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "AUTRE",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "Le 4e duel",
                            "titleDivisible": "Le 4e duel"
                        },
                        "synopsis": {
                            "small": "Jeu. Présenté par Julien Courbet. ",
                            "medium": "Deux candidats disposent chacun de dix jetons qu'ils misent au cours d'un quizz de culture générale. Une bonne réponse leur rapporte mille euros.",
                            "large": "Deux candidats disposent chacun de dix jetons qu'ils misent au cours d'un quizz de culture générale. Une bonne réponse leur rapporte mille euros."
                        },
                        "medias": [
                            {
                                "type": "IMAGE",
                                "height": 270,
                                "width": 480,
                                "format": "image/jpeg",
                                "name": "169_136287.jpg",
                                "imgType": "STD169",
                                "copyright": "Nicolas Guerin / France 2",
                                "rank": 1,
                                "id": 5808,
                                "updateDate": "2012-08-03T13:25:08.000+0000",
                                "path": "plmphoto:/169/11342/169_136287.jpg"
                            }
                        ],
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96571,
                        "members": {
                            "3": {
                                "id": 3,
                                "function": "Présentateur",
                                "rank": 8,
                                "prefix": "Présenté par : ",
                                "persons": [
                                    {
                                        "lastName": "Courbey",
                                        "firstName": "Julien",
                                        "rank": 1,
                                        "id": 190,
                                        "role": "N/A"
                                    }
                                ]
                            }
                        },
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 7,
                                    "label": "Divertissement"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 137,
                                    "label": "Jeu"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 55,
                        "boost": 1
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "AUTRE",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "CD'aujourd'hu",
                            "titleDivisible": "CD'aujourd'hui"
                        },
                        "synopsis": {
                            "small": "Variétés.",
                            "large": "Variétés."
                        },
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96577,
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 7,
                                    "label": "Divertissement"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 149,
                                    "label": "Variétés"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 5,
                        "boost": 1
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "AUTRE",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "Généraliste m",
                            "titleDivisible": "Généraliste marocaine"
                        },
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96573,
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 7,
                                    "label": "Divertissement"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 151,
                                    "label": "Divers"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 180,
                        "boost": 1
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "AUTRE",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "Généraliste m",
                            "titleDivisible": "Généraliste marocaine"
                        },
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96575,
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 7,
                                    "label": "Divertissement"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 151,
                                    "label": "Divers"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 180,
                        "boost": 1
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "AUTRE",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "Généraliste m",
                            "titleDivisible": "Généraliste marocaine"
                        },
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96578,
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 7,
                                    "label": "Divertissement"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 151,
                                    "label": "Divers"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 180,
                        "boost": 1
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "MAGAZINE",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "Envoyé spécial : la...",
                            "titleDivisible": "Envoyé spécial : la suite",
                            "subTitleDivisible": "Mag. Actualités"
                        },
                        "synopsis": {
                            "small": "Envoyé spécial : la suite \"A chacun son tour du monde, deux ans après\". Invités : Géraldine Danon (navigatrice), Philippe Poupon. ",
                            "medium": "Pour son 100e numéro, la rédaction du magazine retrouve de grands voyageurs partis à la découverte du monde. Il y a deux ans, des reporters avaient quitté Thierry et Kilian aux portes du désert de Kysil Kum, aux confins du Kazakhstan. Partis de Valence, dans la Drôme, ils avaient fait le pari de traverser l'Europe et l'Asie à pied pour rejoindre ensuite l'Australie en cargo. Ont-ils eu la force et les moyens financiers d'aller au bout de leur tour du monde ? Pour Frédéric et Vanessa Vasse, qui ont traversé une quinzaine de pays avec leurs trois garçons de 3 à 11 ans, retrouver une vie sédentaire n'a pas été simple.",
                            "large": "Il y a deux ans, Thierry et Kilian avaient fait le pari de traverser l'Europe et l'Asie à pied, avant rejoindre l'Australie en cargo. Sont-ils allés au bout de leur tour du monde ?"
                        },
                        "medias": [
                            {
                                "type": "IMAGE",
                                "height": 270,
                                "width": 480,
                                "format": "image/jpeg",
                                "name": "169_352414.jpg",
                                "imgType": "STD169",
                                "rank": 1,
                                "id": 5959,
                                "updateDate": "2012-08-03T13:25:08.000+0000",
                                "path": "plmphoto:/169/9795/169_352414.jpg"
                            }
                        ],
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96567,
                        "members": {
                            "1": {
                                "id": 1,
                                "function": "Invité",
                                "rank": 10,
                                "prefix": "Invités : ",
                                "persons": [
                                    {
                                        "lastName": "Danon",
                                        "firstName": "Géraldine",
                                        "rank": 1,
                                        "id": 4785,
                                        "role": "navigatrice"
                                    },
                                    {
                                        "lastName": "Poupon",
                                        "firstName": "Philippe",
                                        "rank": 2,
                                        "id": 30269,
                                        "role": "navigateur"
                                    }
                                ]
                            },
                            "3": {
                                "id": 3,
                                "function": "Présentateur",
                                "rank": 8,
                                "prefix": "Présenté par : ",
                                "persons": [
                                    {
                                        "lastName": "Chenu",
                                        "firstName": "Guilaine",
                                        "rank": 1,
                                        "id": 9551,
                                        "role": "N/A"
                                    }
                                ]
                            }
                        },
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 8,
                                    "label": "Information"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 157,
                                    "label": "Mag. Actualités"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 40,
                        "boost": 1
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "MAGAZINE",
                        "itemType": "movie",
                        "titles": {
                            "epgTitle": "Hebdo musique mag",
                            "titleDivisible": "Hebdo musique mag"
                        },
                        "synopsis": {
                            "small": "Présenté par Thomas VDB. ",
                            "medium": "Des reportages, des infos et des rubriques pour se tenir au courant de la production musicale du moment.",
                            "large": "Des reportages, des infos et des rubriques pour se tenir au courant de la production musicale du moment."
                        },
                        "updateDate": "2012-08-03T19:16:16.000+0000",
                        "id": 96565,
                        "members": {
                            "3": {
                                "id": 3,
                                "function": "Présentateur",
                                "rank": 8,
                                "prefix": "Présenté par : ",
                                "persons": [
                                    {
                                        "lastName": "Thomas VDB",
                                        "rank": 1,
                                        "id": 30106,
                                        "role": "N/A"
                                    }
                                ]
                            }
                        },
                        "tagsByType": {
                            "GENRE_CANAL": [
                                {
                                    "id": 9,
                                    "label": "Musique"
                                }
                            ],
                            "SOUS_GENRE_CANAL": [
                                {
                                    "id": 173,
                                    "label": "Mag. Musique"
                                }
                            ]
                        },
                        "lang": "fr",
                        "version": "20120803191616",
                        "duration": 35,
                        "boost": 1
                    }
                ],
                "paging": {
                    "previous": "http://172.30.5.17:8080/api/contents/?Access-Token=4ADD57713B2E8C2151C42E3D7D326&page=14&full=true",
                    "next": "http://172.30.5.17:8080/api/contents/?Access-Token=4ADD57713B2E8C2151C42E3D7D326&page=16&full=true"
                }
            }

+ Request (application/json)

    + Body

            {
                "version": 20141123101010,
                "page": 1,
                "limit": 10,
                "full": false,
            }

+ Response 200 (application/json)

    + Body

            {
               "data": [
                {
                    "objectType": "UNIT",
                    "contentType": "MAGAZINE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Le mag de la science",
                        "titleDivisible": "Le mag de la science"
                    },
                    "synopsis": {
                        "small": "Présenté par Jérôme Bonaldi. ",
                        "medium": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                        "large": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                    },
                    "productionYear": 2012,
                    "updateDate": "2012-08-03T19:16:06.000+0000",
                    "id": 95576,
                    "lang": "fr",
                    "version": "20120803191606",
                    "duration": 25,
                    "boost": 1
                },
                {
                    "objectType": "UNIT",
                    "contentType": "MAGAZINE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Le mag de la science",
                        "titleDivisible": "Le mag de la science"
                    },
                    "synopsis": {
                        "small": "Présenté par Jérôme Bonaldi. ",
                        "medium": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                        "large": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                    },
                    "productionYear": 2012,
                    "updateDate": "2012-08-03T19:16:06.000+0000",
                    "id": 95577,
                    "lang": "fr",
                    "version": "20120803191606",
                    "duration": 30,
                    "boost": 1
                },
                {
                    "objectType": "UNIT",
                    "contentType": "MAGAZINE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Le mag de la science",
                        "titleDivisible": "Le mag de la science"
                    },
                    "synopsis": {
                        "small": "Présenté par Jérôme Bonaldi. ",
                        "medium": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                        "large": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                    },
                    "productionYear": 2012,
                    "updateDate": "2012-08-03T19:16:06.000+0000",
                    "id": 95580,
                    "lang": "fr",
                    "version": "20120803191606",
                    "duration": 30,
                    "boost": 1
                },
                {
                    "objectType": "UNIT",
                    "contentType": "MAGAZINE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Le mag de la science",
                        "titleDivisible": "Le mag de la science"
                    },
                    "synopsis": {
                        "small": "Présenté par Jérôme Bonaldi. ",
                        "medium": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                        "large": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                    },
                    "productionYear": 2012,
                    "updateDate": "2012-08-03T19:16:06.000+0000",
                    "id": 95643,
                    "lang": "fr",
                    "version": "20120803191606",
                    "duration": 30,
                    "boost": 1
                },
                {
                    "objectType": "UNIT",
                    "contentType": "MAGAZINE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Le mag de la science",
                        "titleDivisible": "Le mag de la science"
                    },
                    "synopsis": {
                        "small": "Présenté par Jérôme Bonaldi. ",
                        "medium": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                        "large": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                    },
                    "productionYear": 2012,
                    "updateDate": "2012-08-03T19:16:06.000+0000",
                    "id": 95662,
                    "lang": "fr",
                    "version": "20120803191606",
                    "duration": 30,
                    "boost": 1
                },
                {
                    "objectType": "UNIT",
                    "contentType": "MAGAZINE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Le mag de la science",
                        "titleDivisible": "Le mag de la science"
                    },
                    "synopsis": {
                        "small": "Présenté par Jérôme Bonaldi. ",
                        "medium": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                        "large": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                    },
                    "productionYear": 2012,
                    "updateDate": "2012-08-03T19:16:06.000+0000",
                    "id": 95667,
                    "lang": "fr",
                    "version": "20120803191606",
                    "duration": 30,
                    "boost": 1
                },
                {
                    "objectType": "UNIT",
                    "contentType": "MAGAZINE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Le mag de la science",
                        "titleDivisible": "Le mag de la science"
                    },
                    "synopsis": {
                        "small": "Présenté par Jérôme Bonaldi. ",
                        "medium": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                        "large": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                    },
                    "productionYear": 2012,
                    "updateDate": "2012-08-03T19:16:06.000+0000",
                    "id": 95668,
                    "lang": "fr",
                    "version": "20120803191606",
                    "duration": 30,
                    "boost": 1
                },
                {
                    "objectType": "UNIT",
                    "contentType": "MAGAZINE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Le mag de la science",
                        "titleDivisible": "Le mag de la science"
                    },
                    "synopsis": {
                        "small": "Présenté par Jérôme Bonaldi. ",
                        "medium": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques.",
                        "large": "Jérôme Bonaldi se penche avec sa bonne humeur habituelle sur d'étranges phénomènes scientifiques."
                    },
                    "productionYear": 2012,
                    "updateDate": "2012-08-03T19:16:07.000+0000",
                    "id": 95707,
                    "lang": "fr",
                    "version": "20120803191607",
                    "duration": 30,
                    "boost": 1
                },
                {
                    "objectType": "UNIT",
                    "contentType": "AUTRE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Interruption des...",
                        "titleDivisible": "Interruption des programmes"
                    },
                    "synopsis": {
                        "small": "Interruption des programmes",
                        "large": "Interruption des programmes"
                    },
                    "updateDate": "2012-08-03T19:16:05.000+0000",
                    "id": 95574,
                    "lang": "fr",
                    "version": "20120803191605",
                    "duration": 10,
                    "boost": 1
                },
                {
                    "objectType": "UNIT",
                    "contentType": "AUTRE",
                    "itemType": "movie",
                    "titles": {
                        "epgTitle": "Interruption des...",
                        "titleDivisible": "Interruption des programmes"
                    },
                    "synopsis": {
                        "small": "Interruption des programmes",
                        "large": "Interruption des programmes"
                    },
                    "updateDate": "2012-08-03T19:16:07.000+0000",
                    "id": 95705,
                    "lang": "fr",
                    "version": "20120803191607",
                    "duration": 10,
                    "boost": 1
                }
            ],
            "paging": {
                "next": "http://172.30.5.17:8080/api/contents/?Access-Token=4ADD57713B2E8C2151C42E3D7D326&page=1&version=20120803191607&full=false"
            }
            }


### Create a content [POST]

This method allows users to create content (only itemType:"collection" allowed).

+ Request (application/json)

    + Body

            {
              "objectType": "LIST",
              "contentType": "AUTRE",
              "titles": {
                "epgTitle": "Les bombes des...",
                "titleDivisible": "Les bombes des séries TV",
                "subTitleDivisible": "Divertissement"
              },
              "synopsis": {},
              "lang": "fr",
              "ratingCSA": 4,
              "duration": "0",
              "boost": 1,
              "data": {
                "itemType": "collection",
                "id": "COLL_SERIES_BOMBES",
                "revision": 315529309000,
                "title": "Les bombes des s??ries TV",
                "accroche": "Belles et exigeantes, ces femmes nous mettent les sens en ??moi.",
                "longAccroche": "Belles et exigeantes, ces femmes nous mettent les sens en ??moi.",
                "creationDate": "2013-12-26",
                "ratingCSA": 4,
                "idKey": "mvs_cat_2114",
                "tags": [
                  {
                    "type": "CLASSIFICATION",
                    "name": "Playlists de s??ries",
                    "displayName": "/Canalplay/Listes CPI/Infinity S??ries/Playlists de s??ries",
                    "idKey": "Inf_Series_Collections"
                  }
                ],
                "maxResult": 2000,
                "defaultSorts": [
                  {
                    "itemType": "sortElement",
                    "id": "seBoostDesc",
                    "displayTitle": "Boost desc",
                    "sortKey": "boost",
                    "sortOrder": "desc",
                    "displayName": "Boost desc"
                  },
                  {
                    "itemType": "sortElement",
                    "id": "seDiffDateDesc",
                    "displayTitle": "Date de diffusion desc",
                    "sortKey": "diffusionDate",
                    "sortOrder": "desc",
                    "displayName": "Date de diffusion desc"
                  }
                ],
                "rules": [
                  {
                    "id": "5800002",
                    "itemType": "manualRule",
                    "maxResult": 2000,
                    "contents": [
                      "serie_cat113750364",
                      "serie_cat112930006",
                      "serie_cat110710161",
                      "serie_cat109220219",
                      "serie_cat113750413",
                      "serie_cat109770233",
                      "serie_cat109220236",
                      "serie_cat113450035",
                      "serie_cat109860021",
                      "serie_cat110710026",
                      "serie_cat113210034",
                      "serie_cat109220162"
                    ]
                  }
                ]
              }
            }


+ Response 200 (application/json)

  + Headers

            Location: /api/contents/99999999/summary

+ Response 400 (application/json)

    + Body

            {
              "errorCode": "400",
              "message": "The field 'name' should not be empty."
            }

## Content [/api/contents/{id}?full={full}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + full = `false` (optional, boolean, `true`) ... Ask for full object or not

### Retrieve a content [GET]

Retrieve a `content` with a specific `id`.

+ Request (application/json)

    + Body

            {
                "id": 1,
                "full": true,
            }

+ Response 200 (application/json)

    + Body

            {
               "objectType":"UNIT",
               "contentType":"FILM",
               "itemType":"movie",
               "titles":{
                  "originalTitle":"The Artist",
                  "epgTitle":"The Artist",
                  "titleDivisible":"The Artist",
                  "subTitleDivisible":"Film Comédie dramatique"
               },
               "synopsis":{
                  "small":"En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
                  "medium":"A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
                  "large":"A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
               },
               "medias":[
                  {
                     "type":"IMAGE",
                     "height":272,
                     "width":352,
                     "format":"image/jpeg",
                     "name":"STD_298296.jpg",
                     "imgType":"STD",
                     "rank":1,
                     "id":191281,
                     "updateDate":"2012-09-10T21:44:25.000+0000",
                      "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                  },
                  {
                     "type":"IMAGE",
                     "height":394,
                     "width":700,
                     "format":"image/jpeg",
                     "name":"169_298296.jpg",
                     "imgType":"STD169",
                     "rank":1,
                     "id":191284,
                     "updateDate":"2013-09-23T12:07:47.000+0000",
                      "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                  },
                  {
                     "type":"IMAGE",
                     "height":600,
                     "width":800,
                     "format":"image/jpeg",
                     "name":"ANT_1075478_1_804.jpg",
                     "imgType":"STD",
                     "rank":1,
                     "id":291889,
                     "updateDate":"2012-10-05T17:33:41.000+0000",
                      "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                  },
                  {
                     "type":"IMAGE",
                     "height":576,
                     "width":1024,
                     "format":"image/jpeg",
                     "name":"ANT_1075478_1_412.jpg",
                     "imgType":"STD169",
                     "rank":1,
                     "id":291893,
                     "updateDate":"2012-10-05T17:33:41.000+0000",
                      "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                  },
                  {
                     "type":"IMAGE",
                     "height":426,
                     "width":964,
                     "format":"image/jpeg",
                     "name":"MEA_28153194_298288.jpg",
                     "imgType":"MEAEUREKA",
                     "rank":1,
                     "id":12652568,
                     "updateDate":"2014-09-26T18:13:43.000+0000",
                      "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                  },
                  {
                     "type":"IMAGE",
                     "height":426,
                     "width":964,
                     "format":"image/jpeg",
                     "name":"MEA_28153194_298288.jpg",
                     "imgType":"MEASOIR",
                     "rank":1,
                     "id":12652568,
                     "updateDate":"2014-09-26T18:13:43.000+0000",
                      "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                  },
                  {
                     "type":"IMAGE",
                     "height":360,
                     "width":1400,
                     "format":"image/jpeg",
                     "name":"05_10_theartiste.jpg",
                     "imgType":"CARWEB",
                     "rank":1,
                     "id":12752996,
                     "updateDate":"2014-09-29T12:19:57.000+0000",
                      "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                  }
               ],
               "color":"0",
               "productionNationality":"France - Belgique",
               "productionNationalityCode": ["FR","BE"],
               "productionYear":"2011",
               "updateDate":"2014-12-08T20:12:08.000+0000",
               "id":585877,
               "num":1,
               "members":{
                  "2":{
                     "id":2,
                     "function":"Acteur",
                     "rank":12,
                     "prefix":"Avec : ",
                     "persons":[
                        {
                           "lastName":"Dujardin",
                           "firstName":"Jean",
                           "rank":1,
                           "id":1477,
                           "role":"George Valentin",
                           "awards":[
                              {
                                 "festivalId":10,
                                 "festivalName":"Oscars",
                                 "festivalCountry":"Etats-Unis",
                                 "festivalCountryCode" : "US",
                                 "year":2012,
                                 "awardId":11,
                                 "awardName":"Oscar du meilleur acteur",
                                 "order":11
                              }
                           ]
                        },
                        {
                           "lastName":"Bejo",
                           "firstName":"Bérénice",
                           "rank":2,
                           "id":1622,
                           "role":"Peppy Miller",
                           "awards":[
                              {
                                 "festivalId":7,
                                 "festivalName":"César",
                                 "festivalCountry":"France",
                                 "festivalCountryCode" : "US",
                                 "year":2012,
                                 "awardId":12,
                                 "awardName":"César de la meilleur actrice",
                                 "order":12
                              }
                           ]
                        },
                        {
                           "lastName":"Goodman",
                           "firstName":"John",
                           "rank":3,
                           "id":1018,
                           "role":"Al Zimmer"
                        },
                        {
                           "lastName":"Cromwell",
                           "firstName":"James",
                           "rank":4,
                           "id":25450,
                           "role":"Clifton"
                        },
                        {
                           "lastName":"Pyle",
                           "firstName":"Missy",
                           "rank":5,
                           "id":17557,
                           "role":"Constance"
                        },
                        {
                           "lastName":"Miller",
                           "firstName":"Penelope Ann",
                           "rank":6,
                           "id":16975,
                           "role":"Doris"
                        },
                        {
                           "lastName":"Tulloch",
                           "firstName":"Bitsie",
                           "rank":7,
                           "id":6961,
                           "role":"Norma"
                        },
                        {
                           "lastName":"Grant",
                           "firstName":"Beth",
                           "rank":8,
                           "id":17187,
                           "role":"la servante"
                        },
                        {
                           "lastName":"Pankin",
                           "firstName":"Stuart",
                           "rank":9,
                           "id":6958,
                           "role":"Otto"
                        },
                        {
                           "lastName":"Margulies",
                           "firstName":"Joshua",
                           "rank":10,
                           "id":6960,
                           "role":"Jacques"
                        },
                        {
                           "lastName":"Laren",
                           "firstName":"Michael",
                           "rank":11,
                           "id":6956,
                           "role":"Michel"
                        },
                        {
                           "lastName":"Dean",
                           "firstName":"Calvin",
                           "rank":12,
                           "id":6952,
                           "role":"monsieur Sauveur"
                        }
                     ]
                  },
                  "4":{
                     "id":4,
                     "function":"Réalisateur",
                     "rank":1,
                     "prefix":"De : ",
                     "persons":[
                        {
                           "lastName":"Hazanavicius",
                           "firstName":"Michel",
                           "rank":1,
                           "id":23711,
                           "role":"N/A",
                           "awards":[
                              {
                                 "festivalId":10,
                                 "festivalName":"Oscars",
                                 "festivalCountry":"Etats-Unis",
                                 "festivalCountryCode" : "US",
                                 "year":2012,
                                 "awardId":8,
                                 "awardName":"Oscar du meilleur réalisateur",
                                 "order":8
                              },
                              {
                                 "festivalId":7,
                                 "festivalName":"César",
                                 "festivalCountry":"France",
                                 "festivalCountryCode" : "FR",
                                 "year":2012,
                                 "awardId":9,
                                 "awardName":"César du meilleur réalisateur",
                                 "order":9
                              }
                           ]
                        }
                     ]
                  }
               },
               "partners":{
                  "20":{
                     "name":"Allociné",
                     "id":20,
                     "opinions":[
                        {
                           "type":"NOTE_PRESSE",
                           "rating":4,
                           "recommended":true
                        }
                     ]
                  },
                  "25":{
                     "name":"Télérama",
                     "id":25,
                     "opinions":[
                        {
                           "type":"NOTE_TELERAMA",
                           "rating":2,
                           "name":"Critique",
                           "recommended":true,
                           "opinion":"Le film multiprimé des deux côtés de l'Atlantique, devenu un phénomène ! Michel Hazanavicius rend hommage au septième art, à ses débuts, en noir et blanc et muet. Jean Dujardin, en star déchue, apporte son charme facétieux à cette comédie nostalgique."
                        }
                     ]
                  },
                  "26":{
                     "name":"Télécâble Sat",
                     "id":26,
                     "opinions":[
                        {
                           "type":"NOTE_ETOILE",
                           "rating":4,
                           "name":"Critique",
                           "recommended":true,
                           "opinion":"Un film muet, en noir et blanc, dans la grande tradition du genre : un défi osé, brillamment relevé. Les images sont belles, la musique entraînante, le scénario plein d'humour. Cinq oscars, six César et prix d'interprétation à Cannes pour Jean Dujardin, qui forme un duo formidable avec Bérénice Bejo."
                        }
                     ]
                  },
                  "44":{
                     "name":"SensCritique",
                     "id":44,
                     "opinions":[
                        {
                           "type":"NOTE_SENSCRIT",
                           "rating":6.8,
                           "recommended":true
                        }
                     ]
                  }
               },
               "tagsByType":{
                  "GENRE_CANAL":[
                     {
                        "id":1,
                        "label":"Cinéma"
                     }
                  ],
                  "SOUS_GENRE_CANAL":[
                     {
                        "id":20,
                        "label":"Film Comédie dramatique"
                     }
                  ]
               },
               "lang":"fr",
               "version":"20141208201208",
               "awards":[
                  {
                     "festivalId":10,
                     "festivalName":"Oscars",
                     "festivalCountry":"Etats-Unis",
                     "festivalCountryCode" : "US",
                     "year":2012,
                     "awardId":2,
                     "awardName":"Oscar du meilleur film",
                     "order":2
                  },
                  {
                     "festivalId":7,
                     "festivalName":"César",
                     "festivalCountry":"France",
                     "festivalCountryCode" : "FR",
                     "year":2012,
                     "awardId":3,
                     "awardName":"César du meilleur film",
                     "order":3
                  }
               ],
               "ratingCSA":1,
               "duration":"100",
               "boost":32715,
               "diffusionDate":"2012-10-05T18:55:00.000+0000"
            }

+ Request (application/json)

    + Body

            {
                "id": 1,
                "full": false,
            }

+ Response 200 (application/json)

    + Body

            {
                "objectType": "UNIT",
                "contentType": "FILM",
                "itemType": "movie",
                "titles": {
                    "originalTitle": "The Artist",
                    "epgTitle": "The Artist",
                    "titleDivisible": "The Artist",
                    "subTitleDivisible": "Film Comédie dramatique"
                },
                "synopsis": {
                    "small": "En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
                    "medium": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
                    "large": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
                },
                "color": "0",
                "productionNationality": "France - Belgique",
                "productionNationalityCode": ["FR","BE"],
                "productionYear": "2011",
                "updateDate": "2014-12-08T20:12:08.000+0000",
                "id": 585877,
                "num": 1,
                "lang": "fr",
                "version": "20141208201208",
                "ratingCSA": 1,
                "ageRange": 2,
                "duration": "100",
                "boost": 32715,
                "diffusionDate": "2012-10-05T18:55:00.000+0000"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

### Update a content [PUT]

This method allow users to update a content summary. Only these field are updatable

Collections rules could be also updated using this method.

+ Request (application/json)

    + Body

            {
              "titles": {
                "originalTitle": "The Artist",
                "epgTitle": "The Artist",
                "titleDivisible": "The Artist",
                "subTitleDivisible": "Film Comédie dramatique"
              },
              "synopsis": {
                "small": "En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
                "medium": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
                "large": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
              },
            }

+ Response 204 (application/json)

+ Response 400 (application/json)

    + Body

            {
              "errorCode": "400",
              "message": "The field 'originalTitle' should not be empty."
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }


### Delete a content [DELETE]

This method allow users to delete a content. Only collection are deletable.

+ Response 200 (application/json)

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Delete forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }


## Media list [/api/contents/{id}/media?page={page}&limit={limit}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
  + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve content media [GET]

Retrieve all media of a content with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
            "data": [
                {
                    "type": "IMAGE",
                    "height": 272,
                    "width": 352,
                    "format": "image/jpeg",
                    "name": "STD_298296.jpg",
                    "imgType": "STD",
                    "rank": 1,
                    "id": 191281,
                    "updateDate": "2013-10-09T12:14:39.000+0000",
                    "url": "http://172.31.77.77:80/ServiceImage/MediaProgramme?idprg=585877&type=STD"
                },
                {
                    "type": "IMAGE",
                    "height": 394,
                    "width": 700,
                    "format": "image/jpeg",
                    "name": "169_298296.jpg",
                    "imgType": "STD169",
                    "rank": 1,
                    "id": 191284,
                    "updateDate": "2013-10-09T12:14:39.000+0000",
                    "url": "http://172.31.77.77:80/ServiceImage/MediaProgramme?idprg=585877&type=STD169"
                },
                {
                    "type": "IMAGE",
                    "height": 426,
                    "width": 964,
                    "format": "image/jpeg",
                    "name": "MEA_28153194_298288.jpg",
                    "imgType": "MEAEUREKA",
                    "rank": 1,
                    "id": 12652568,
                    "updateDate": "2014-09-26T18:13:43.000+0000",
                    "url": "http://172.31.77.77:80/ServiceImage/MediaProgramme?idprg=585877&type=MEAEUREKA"
                },
                {
                    "type": "IMAGE",
                    "height": 426,
                    "width": 964,
                    "format": "image/jpeg",
                    "name": "MEA_28153194_298288.jpg",
                    "imgType": "MEASOIR",
                    "rank": 1,
                    "id": 12652568,
                    "updateDate": "2014-09-26T18:13:43.000+0000",
                    "url": "http://172.31.77.77:80/ServiceImage/MediaProgramme?idprg=585877&type=MEASOIR"
                },
                {
                    "type": "IMAGE",
                    "height": 360,
                    "width": 1400,
                    "format": "image/jpeg",
                    "name": "05_10_theartiste.jpg",
                    "imgType": "CARWEB",
                    "rank": 1,
                    "id": 12752996,
                    "updateDate": "2014-09-29T12:31:30.000+0000",
                    "url": "http://172.31.77.77:80/ServiceImage/MediaProgramme?idprg=585877&type=CARWEB"
                }
            ],
            "paging": {}
            }


+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content media (1) not found"
            }

## Media link [/api/contents/{id}/media/{mediaId}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + mediaId (required, number, `12752996`) ... Numeric `id` of the media.

### Attach a media [PUT]

Attach the given `mediaId` to the content with a specific `id`.

+ Request (application/json)

        [
            {
                "mediaId" : 353535
            },{
                "mediaId" : 353536
            }
        ]

+ Response 201 (application/json)

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Media to attach (1) not found"
            }

### Detach a media [DELETE]

Detach the given `mediaId` to the content with a specific `id`.

+ Response 200 (application/json)

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Detach forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Media to detach (1) not found"
            }

## Members list [/api/contents/{id}/members?page={page}&limit={limit}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
  + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve content members [GET]

Retrieve all `members` of a content with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "rank": 1,
                        "role": "George Valentin",
                        "person": {
                            "id": 1477,
                            "firstName": "Jean",
                            "lastName": "Dujardin"
                        },
                        "function": {
                            "id": 2,
                            "name": "Acteur",
                            "rank": 12,
                            "prefix": "Avec : "
                        },
                        "awards": [
                            {
                                "festivalId": 10,
                                "festivalName": "Oscars",
                                "festivalCountry": "Etats-Unis",
                                "year": 2012,
                                "awardId": 11,
                                "awardName": "Oscar du meilleur acteur",
                                "order": 11
                            }
                        ]
                    },
                    {
                        "rank": 1,
                        "role": "N/A",
                        "person": {
                            "id": 23711,
                            "firstName": "Michel",
                            "lastName": "Hazanavicius"
                        },
                        "function": {
                            "id": 4,
                            "name": "Réalisateur",
                            "rank": 1,
                            "prefix": "De : "
                        },
                        "awards": [
                            {
                                "festivalId": 10,
                                "festivalName": "Oscars",
                                "festivalCountry": "Etats-Unis",
                                "year": 2012,
                                "awardId": 8,
                                "awardName": "Oscar du meilleur réalisateur",
                                "order": 8
                            },
                            {
                                "festivalId": 7,
                                "festivalName": "César",
                                "festivalCountry": "France",
                                "year": 2012,
                                "awardId": 9,
                                "awardName": "César du meilleur réalisateur",
                                "order": 9
                            }
                        ]
                    },
                    {
                        "rank": 2,
                        "role": "Peppy Miller",
                        "person": {
                            "id": 1622,
                            "firstName": "Bérénice",
                            "lastName": "Bejo"
                        },
                        "function": {
                            "id": 2,
                            "name": "Acteur",
                            "rank": 12,
                            "prefix": "Avec : "
                        },
                        "awards": [
                            {
                                "festivalId": 7,
                                "festivalName": "César",
                                "festivalCountry": "France",
                                "year": 2012,
                                "awardId": 12,
                                "awardName": "César de la meilleur actrice",
                                "order": 12
                            }
                        ]
                    },
                    {
                        "rank": 3,
                        "role": "Al Zimmer",
                        "person": {
                            "id": 1018,
                            "firstName": "John",
                            "lastName": "Goodman"
                        },
                        "function": {
                            "id": 2,
                            "name": "Acteur",
                            "rank": 12,
                            "prefix": "Avec : "
                        },
                        "awards": []
                    },
                    {
                        "rank": 4,
                        "role": "Clifton",
                        "person": {
                            "id": 25450,
                            "firstName": "James",
                            "lastName": "Cromwell"
                        },
                        "function": {
                            "id": 2,
                            "name": "Acteur",
                            "rank": 12,
                            "prefix": "Avec : "
                        },
                        "awards": []
                    },
                    {
                        "rank": 5,
                        "role": "Constance",
                        "person": {
                            "id": 17557,
                            "firstName": "Missy",
                            "lastName": "Pyle"
                        },
                        "function": {
                            "id": 2,
                            "name": "Acteur",
                            "rank": 12,
                            "prefix": "Avec : "
                        },
                        "awards": []
                    },
                    {
                        "rank": 6,
                        "role": "Doris",
                        "person": {
                            "id": 16975,
                            "firstName": "Penelope Ann",
                            "lastName": "Miller"
                        },
                        "function": {
                            "id": 2,
                            "name": "Acteur",
                            "rank": 12,
                            "prefix": "Avec : "
                        },
                        "awards": []
                    },
                    {
                        "rank": 7,
                        "role": "Norma",
                        "person": {
                            "id": 6961,
                            "firstName": "Bitsie",
                            "lastName": "Tulloch"
                        },
                        "function": {
                            "id": 2,
                            "name": "Acteur",
                            "rank": 12,
                            "prefix": "Avec : "
                        },
                        "awards": []
                    },
                    {
                        "rank": 8,
                        "role": "la servante",
                        "person": {
                            "id": 17187,
                            "firstName": "Beth",
                            "lastName": "Grant"
                        },
                        "function": {
                            "id": 2,
                            "name": "Acteur",
                            "rank": 12,
                            "prefix": "Avec : "
                        },
                        "awards": []
                    },
                    {
                        "rank": 9,
                        "role": "Otto",
                        "person": {
                            "id": 6958,
                            "firstName": "Stuart",
                            "lastName": "Pankin"
                        },
                        "function": {
                            "id": 2,
                            "name": "Acteur",
                            "rank": 12,
                            "prefix": "Avec : "
                        },
                        "awards": []
                    }
                ],
                "paging": {
                    "next": "http://172.30.5.17:8080/api/contents/585877/members?Access-Token=4ADD57713B2E8C2151C42E3D7D326&page=2&full=true"
                }
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## Reviews list [/api/contents/{id}/reviews?page={page}&limit={limit}]

Reviews providers are:

| Partner           | Id | Grade system | References |
|--------------------|----|---------------------|---------------|
| Allociné           | 20 | 0 to 5             | [Allociné logo] (http://media.mycanal.fr/design_pack/frontend/images/sitewide/allocine_white.png) & [yellow / white star icons source] (http://media.mycanal.fr/design_pack/frontend/images/sitewide/icons-white.png)|
| SensCritique   | 44 | 0 to 10           | [SensCritique logo] (http://media.mycanal.fr/design_pack/frontend/images/sitewide/sc_white.jpg) |
| Télécâble Sat  | 26 | 0 to 4            | [Red star icons source] (http://media.mycanal.fr/design_pack/frontend/images/sitewide/redStar.png) |
| Télérama         | 25 | 0 to 5            | [Telerama icons source](http://media.mycanal.fr/design_pack/frontend/images/sitewide/teleramas.png) |

Each provider can allow multiple rating type:

| Partner       | Rating type     |
|---------------|-----------------|
| Allociné      | NOTE_PRESSE     |
| Allociné      | NOTE_SPECTATEUR |
| SensCritique  | NOTE_SENSCRIT   |
| Télécâble Sat | NOTE_ETOILE     |
| Télérama      | NOTE_TELERAMA   |

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
  + page = `1` (optional, number, `2`) ... The page to be returned


### Retrieve content reviews [GET]

Retrieve all `reviews` of a content with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "name": "Allociné",
                        "id": 20,
                        "opinions": [
                            {
                                "type": "NOTE_PRESSE",
                                "rating": 4,
                                "recommended": true
                            }
                        ]
                    },
                    {
                        "name": "Allociné",
                        "id": 20,
                        "opinions": [
                            {
                                "type": "NOTE_PRESSE",
                                "rating": 4,
                                "recommended": true
                            }
                        ]
                    },
                    {
                        "name": "Télérama",
                        "id": 25,
                        "opinions": [
                            {
                                "type": "NOTE_TELERAMA",
                                "rating": 2,
                                "name": "Critique",
                                "recommended": true,
                                "opinion": "Le film multiprimé des deux côtés de l'Atlantique, devenu un phénomène ! Michel Hazanavicius rend hommage au septième art, à ses débuts, en noir et blanc et muet. Jean Dujardin, en star déchue, apporte son charme facétieux à cette comédie nostalgique."
                            }
                        ]
                    },
                    {
                        "name": "Télécâble Sat",
                        "id": 26,
                        "opinions": [
                            {
                                "type": "NOTE_ETOILE",
                                "rating": 4,
                                "name": "Critique",
                                "recommended": true,
                                "opinion": "Un film muet, en noir et blanc, dans la grande tradition du genre : un défi osé, brillamment relevé. Les images sont belles, la musique entraînante, le scénario plein d'humour. Cinq oscars, six César et prix d'interprétation à Cannes pour Jean Dujardin, qui forme un duo formidable avec Bérénice Bejo."
                            }
                        ]
                    },
                    {
                        "name": "SensCritique",
                        "id": 44,
                        "opinions": [
                            {
                                "type": "NOTE_SENSCRIT",
                                "rating": 6.8,
                                "recommended": true
                            }
                        ]
                    }
                ],
                "paging": {}
            }
    
+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## Tags list [/api/contents/{id}/tags?page={page}&limit={limit}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
  + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve content tags [GET]

Retrieve all `tags` of a content with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "name": "Allociné",
                        "id": 20,
                        "opinions": [
                            {
                                "type": "NOTE_PRESSE",
                                "rating": 4,
                                "recommended": true
                            }
                        ]
                    },
                    {
                        "name": "Allociné",
                        "id": 20,
                        "opinions": [
                            {
                                "type": "NOTE_PRESSE",
                                "rating": 4,
                                "recommended": true
                            }
                        ]
                    },
                    {
                        "name": "Télérama",
                        "id": 25,
                        "opinions": [
                            {
                                "type": "NOTE_TELERAMA",
                                "rating": 2,
                                "name": "Critique",
                                "recommended": true,
                                "opinion": "Le film multiprimé des deux côtés de l'Atlantique, devenu un phénomène ! Michel Hazanavicius rend hommage au septième art, à ses débuts, en noir et blanc et muet. Jean Dujardin, en star déchue, apporte son charme facétieux à cette comédie nostalgique."
                            }
                        ]
                    },
                    {
                        "name": "Télécâble Sat",
                        "id": 26,
                        "opinions": [
                            {
                                "type": "NOTE_ETOILE",
                                "rating": 4,
                                "name": "Critique",
                                "recommended": true,
                                "opinion": "Un film muet, en noir et blanc, dans la grande tradition du genre : un défi osé, brillamment relevé. Les images sont belles, la musique entraînante, le scénario plein d'humour. Cinq oscars, six César et prix d'interprétation à Cannes pour Jean Dujardin, qui forme un duo formidable avec Bérénice Bejo."
                            }
                        ]
                    },
                    {
                        "name": "SensCritique",
                        "id": 44,
                        "opinions": [
                            {
                                "type": "NOTE_SENSCRIT",
                                "rating": 6.8,
                                "recommended": true
                            }
                        ]
                    }
                ],
                "paging": {}
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## Tag [/api/contents/{id}/tags/{tagId}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + tagId (optional, number, `1`) ... Numeric `id` of the tag.
  
### Add a new content/tag link [PUT]

Attach the given `tagId` to the content with a specific `id`.

+ Response 201 (application/json)

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Atach forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Tag to attach (1) not found"
            }

### Delete a content/tag link [DELETE]

Detach the given `tagId` to the content with a specific `id`.
Auto defined tags are not deletable. Only user added link could by deleted.

+ Response 200 (application/json)

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Detach forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Tag to detach (1) not found"
            }

## Awards list [/api/contents/{id}/awards?page={page}&limit={limit}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the content.
  + limit = `10` (optional, number, `10`) ... The number of elements retuned limit (max 300)
  + page = `1` (optional, number, `2`) ... The page to be returned


### Retrieve content awards [GET]

Retrieve all `awards` of a content with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "festivalId": 10,
                        "festivalName": "Oscars",
                        "festivalCountry": "Etats-Unis",
                        "year": 2012,
                        "awardId": 8,
                        "awardName": "Oscar du meilleur réalisateur",
                        "order": 8,
                        "festivalCountryCode": "US"
                    },
                    {
                        "festivalId": 7,
                        "festivalName": "César",
                        "festivalCountry": "France",
                        "year": 2012,
                        "awardId": 9,
                        "awardName": "César du meilleur réalisateur",
                        "order": 9,
                        "festivalCountryCode": "FR"
                    },
                    {
                        "festivalId": 10,
                        "festivalName": "Oscars",
                        "festivalCountry": "Etats-Unis",
                        "year": 2012,
                        "awardId": 11,
                        "awardName": "Oscar du meilleur acteur",
                        "order": 11,
                        "festivalCountryCode": "US"
                    },
                    {
                        "festivalId": 7,
                        "festivalName": "César",
                        "festivalCountry": "France",
                        "year": 2012,
                        "awardId": 12,
                        "awardName": "César de la meilleur actrice",
                        "order": 12,
                        "festivalCountryCode": "FR"
                    },
                    {
                        "festivalId": 10,
                        "festivalName": "Oscars",
                        "festivalCountry": "Etats-Unis",
                        "year": 2012,
                        "awardId": 2,
                        "awardName": "Oscar du meilleur film",
                        "order": 2,
                        "festivalCountryCode": "US"
                    },
                    {
                        "festivalId": 7,
                        "festivalName": "César",
                        "festivalCountry": "France",
                        "year": 2012,
                        "awardId": 3,
                        "awardName": "César du meilleur film",
                        "order": 3,
                        "festivalCountryCode": "FR"
                    }
                ],
                "paging": {}
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## See also list [/api/contents/{id}/seealso?page={page}&limit={limit}]
Return the list of the "See Also" programs attached to the given id.

+ Parameters
    + id (required, number, `2798845`) ... Numeric `id` of the Content to perform action with.
    + limit = `10` (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve a content see also [GET]

Retrieve all `seealso` contents of a content with a specific `id`.

+ Response 200 (application/json)

    + Body
    
            [
            2798846,
            2798847,
            2798848,
            2798849
            ]

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## Sub object list [/api/contents/{id}/subobjects?page={page}&limit={limit}]
Return the list of linked sub objects

+ Parameters
    + id (required, number, `2798845`) ... Numeric `id` of the Content to perform action with.
    + limit = `10` (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve a content see also [GET]

Retrieve all `subobjects` contents of a content with a specific `id`.

+ Response 200 (application/json)

    + Body

                    {
                "data": [
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep1",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "Justin crée un monstre féminin pour garder sa chambre des fouilles d’Alex, mais le plan se retourne contre lui quand Alex et Frankengirl deviennent amies.",
                            "medium": "Justin crée un monstre féminin pour garder sa chambre des fouilles d’Alex, mais le plan se retourne contre lui quand Alex et Frankengirl deviennent amies.",
                            "large": "Justin crée un monstre féminin pour garder sa chambre des fouilles incessantes d’Alex, mais le plan se retourne contre lui quand Alex et Frankengirl deviennent amies..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2009,
                        "updateDate": "2015-01-27T14:00:10.000+0000",
                        "id": 120505,
                        "num": 1,
                        "lang": "fr",
                        "version": "20150127140010",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 16624,
                        "diffusionDate": "2012-07-01T08:25:00.000+0000"
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep2",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "La famille Russo se prépare pour Halloween et transforme son fameux «wagon restaurant» en maison hantée.",
                            "medium": "La famille Russo se prépare pour Halloween et transforme son fameux «wagon restaurant» en maison hantée.",
                            "large": "La famille Russo se prépare pour Halloween et transforme son fameux «wagon restaurant» en maison hantée..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2009,
                        "updateDate": "2015-03-31T16:58:02.000+0000",
                        "id": 144192,
                        "num": 2,
                        "lang": "fr",
                        "version": "20150331165802",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 16624,
                        "diffusionDate": "2012-07-01T08:55:00.000+0000"
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep3",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "Justin tente de devenir un chasseur de monstres pour terminer son entraînement de sorcier. Max sépare accidentellement sa conscience de lui-même en jetant un sort.",
                            "medium": "Justin tente de devenir un chasseur de monstres pour terminer son entraînement de sorcier. Max sépare accidentellement sa conscience de lui-même en jetant un sort.",
                            "large": "Justin tente de devenir un chasseur de monstres dans le but de terminer son entraînement de sorcier. Max sépare accidentellement sa conscience de lui-même en jetant un sort..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2009,
                        "updateDate": "2015-01-28T13:58:47.000+0000",
                        "id": 120608,
                        "num": 3,
                        "lang": "fr",
                        "version": "20150128135847",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 16624,
                        "diffusionDate": "2012-07-01T09:20:00.000+0000"
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep4",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "Justin est un chasseur de monstre junior, et sans le vouloir il dénonce Juliet et sa famille au Comité des Chasseurs de Monstres.",
                            "medium": "Justin est un chasseur de monstre junior, et sans le vouloir il dénonce Juliet et sa famille au Comité des Chasseurs de Monstres.",
                            "large": "Justin est un chasseur de monstre junior, et sans le vouloir il dénonce Juliet et sa famille au Comité des Chasseurs de Monstres. Pendant ce temps, Max tente de se séparer de sa conscience..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2009,
                        "updateDate": "2015-01-30T13:55:34.000+0000",
                        "id": 120849,
                        "num": 4,
                        "lang": "fr",
                        "version": "20150130135534",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 16624,
                        "diffusionDate": "2012-07-01T09:45:00.000+0000"
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep5",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "Justin a pour première mission de capturer une momie. De son côté, Alex aimerait prendre de l'avance sur son petit frère Max et sa conscience.",
                            "medium": "Justin a pour première mission de capturer une momie. De son côté, Alex aimerait prendre de l'avance sur son petit frère Max et sa conscience.",
                            "large": "Justin est fin prêt pour devenir chasseur de monstres et sa première mission est de capturer une momie. De son côté, Alex aimerait prendre de l'avance sur son petit frère Max et sa conscience. Elle décide de les séparer..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2009,
                        "updateDate": "2015-02-02T14:19:55.000+0000",
                        "id": 120803,
                        "num": 5,
                        "lang": "fr",
                        "version": "20150202141955",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 16624,
                        "diffusionDate": "2012-07-09T18:10:00.000+0000"
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep6",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "Harper emménage chez les Russo et Alex nettoie la cave pour faire de la place pour les affaires de son amie. Elle retrouve sa veille maison de poupée.",
                            "medium": "Harper emménage chez les Russo et Alex nettoie la cave pour faire de la place pour les affaires de son amie. Elle retrouve sa veille maison de poupée.",
                            "large": "Harper emménage chez les Russo et Alex nettoie la cave pour faire de la place pour les affaires de son amie. C'est là qu'elle retrouve sa veille maison de poupée, et elle se fait rétrécir pour pouvoir y entrer..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2009,
                        "updateDate": "2015-02-03T14:01:53.000+0000",
                        "id": 120848,
                        "num": 6,
                        "lang": "fr",
                        "version": "20150203140153",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 16624,
                        "diffusionDate": "2012-07-10T18:10:00.000+0000"
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep7",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "Harper apprend qu'Alex se sert de sa magie pour l'aider à gagner le marathon. Justin s'inscrit et espère être le premier Russo à gagner dans une compétition sportive.",
                            "medium": "Harper apprend qu'Alex se sert de sa magie pour l'aider à gagner le marathon. Justin s'inscrit et espère être le premier Russo à gagner dans une compétition sportive.",
                            "large": "Harper est très ennuyée quand elle apprend qu'Alex se sert de sa magie pour l'aider à gagner le marathon. Pendant ce temps, Justin s'inscrit au marathon et espère être le premier Russo à gagner dans une compétition sportive..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2009,
                        "updateDate": "2015-02-04T13:55:19.000+0000",
                        "id": 120804,
                        "num": 7,
                        "lang": "fr",
                        "version": "20150204135519",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 16624,
                        "diffusionDate": "2012-07-11T18:10:00.000+0000"
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep8",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "Alex use de la magie pour rendre une jeune peintre totalement fou d'elle et lui faire un peu oublier sa passion des chiens.",
                            "medium": "Alex use de la magie pour rendre une jeune peintre totalement fou d'elle et lui faire un peu oublier sa passion des chiens.",
                            "large": "Mason est le nouvel élève du cours de dessin d'Alex. Elle est totalement charmée par le jeune homme mais celui-ci est obsédé par les chiens. Elle use de la magie pour le rendre totalement fou d'elle..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2010,
                        "updateDate": "2015-02-06T13:56:09.000+0000",
                        "id": 120998,
                        "num": 8,
                        "lang": "fr",
                        "version": "20150206135609",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 16624,
                        "diffusionDate": "2012-07-12T18:10:00.000+0000"
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep9",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "Durant ses rendez-vous, le petit ami d'Alex se comporte étrangement. En effet la nuit tombée, il s'enfuit à toute vitesse.",
                            "medium": "Durant ses rendez-vous, le petit ami d'Alex se comporte étrangement. En effet la nuit tombée, il s'enfuit à toute vitesse.",
                            "large": "Durant ses rendez-vous, le petit ami d'Alex se comporte étrangement. En effet la nuit tombée, il s'enfuit à toute vitesse. Tandis qu'Harper et Alex essayent de chercher pourquoi, Max et son frère remuent ciel et terre pour retrouver Juliette..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2010,
                        "updateDate": "2015-02-09T14:06:03.000+0000",
                        "id": 490235,
                        "num": 9,
                        "lang": "fr",
                        "version": "20150209140603",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 19293,
                        "diffusionDate": "2012-09-14T17:05:00.000+0000"
                    },
                    {
                        "objectType": "UNIT",
                        "contentType": "SERIE",
                        "itemType": "movie",
                        "titles": {
                            "originalTitle": "Wizards of Waverly Place",
                            "epgTitle": "Les sorciers de...",
                            "titleDivisible": "Les sorciers de Waverly Place",
                            "titleIndivisible": "S3 - Ep10",
                            "subTitleDivisible": "Série Jeunesse"
                        },
                        "synopsis": {
                            "small": "Alex est dévastée. Mason est retombé amoureux de Juliette après qu'elle a été libérée par Justin de l'horrible momie.",
                            "medium": "Alex est dévastée. Mason est retombé amoureux de Juliette après qu'elle a été libérée par Justin de l'horrible momie.",
                            "large": "Alex est dévastée. Mason est retombé amoureux de Juliette après qu'elle a été libérée par Justin de l'horrible momie. Mais Mason est confus et jure à Alex que son amour pour elle est vrai. Les Russo et Harper vont tout faire pour protéger Alex..."
                        },
                        "color": "1",
                        "productionNationality": "Etats-Unis",
                        "productionYear": 2010,
                        "updateDate": "2015-02-10T13:52:26.000+0000",
                        "id": 510375,
                        "num": 10,
                        "lang": "fr",
                        "version": "20150210135226",
                        "ratingCSA": 1,
                        "ageRange": 3,
                        "duration": 22,
                        "boost": 19293,
                        "diffusionDate": "2012-09-17T16:45:00.000+0000"
                    }
                ],
                "paging": {
                    "next": "http://172.30.5.17:8080/api/contents/4603514/subobjects?Access-Token=4ADD57713B2E8C2151C42E3D7D326&page=2&full=true"
                }
            }


+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

# Group Identity

Identity API provide a way to get the BDDPe object from the CableLabs provider and asset id.
It provides additional information such as external content overloading.

## Get current version [/api/identity/currentVersion]
Return the current version in order to use the identity list API

### Retrieve external id list from a content id [GET]
+ Response 200 (application/json)

        11944145

## Get external ids & overload [/api/identity/edito/{bddpId}]
Return if found the list of external id registred for the given content id

+ Parameters
    + bddpId (required, string, `585877`) ... Number `bddpId` the content id

### Retrieve external id list from a content id [GET]
+ Response 200 (application/json)

    + Body

            {
                  "data": [
                  {
                    "providerId": "canal.fr",
                    "assetID": "1075478_1_VR_HD_MTBD",
                    "contentId": 585877,
                    "version": 105189
                  },
                  {
                    "providerId": "orange.com",
                    "assetID": "THEARTISTXXW0058364Z",
                    "contentId": 585877,
                    "version": 134996
                  }
                ],
                "paging": {
                    "next": "http://127.0.0.1:8080/api/identity/edito/123456?page=2"
                }
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## List of external id [/api/identity/external/?version={version}&limit={limit}&page={page}]
Return the list of external id added or modified since the last given version param

### Get update [GET]

+ Parameters
    + version (required, number, `20141123101010`) ... String representing the version that will be used to filter the returned objects.
    + limit = `10` (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

+ Response 200 (application/json)

    + Body

            {
              "data": [
                {
                  "providerId": "ANT",
                  "assetID": "1081101_134",
                  "contentId": 1072121,
                  "version": 84252
                },
                {
                  "providerId": "ANT",
                  "assetID": "1081101_135",
                  "contentId": 1072119,
                  "version": 84253
                },
                {
                  "providerId": "tvmelody.com",
                  "assetID": "77515785",
                  "contentId": 738178,
                  "version": 84254
                }
              ],
              "paging": {
                "previous": null,
                "next": "http://127.0.0.1:8080/api/identity/external/?limit=3&page=1&version=84254",
                "nbElement": null
              }
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## External Id to Bddp Id [/api/identity/external/{providerId}/{assetId}]
Return if found the BDDP Id of the given id for the partner

+ Parameters
    + providerId (required, string, `orange.com`) ... Number `providerId` the provider id
    + assetId (required, string, `KITDESU0143W0084780Z`) ... String `assetId` the asset id.


### Retrieve a content from an external id [GET]
+ Response 200 (application/json)

    + Body

            {
              "providerId": "canal.fr",
              "assetID": "1075478_1_VR_HD_MTBD",
              "contentId": 585877,
              "version": 105189
            }


+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

# Group Overload

## List of overloads  [/api/overloads/?version={version}&limit={limit}&page={page}]
Return the list of overloads added or modified since the last given version param

### Get overloads [GET]

+ Parameters
    + version (required, number, `20141123101010`) ... String representing the version that will be used to filter the returned objects.
    + limit = `10` (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page =`1` (optional, number, `2`) ... The page to be returned

+ Response 200 (application/json)

    + Body

            {
              "data": [
                {
                  "providerId": "canal.fr",
                  "assetId": "1075478_1_VR_HD_MTBD",
                  "overload": {
                    "objectType": null,
                    "contentType": null,
                    "itemType": null,
                    "titles": {
                        "originalTitle": null,
                        "epgTitle": null,
                        "titleDivisible": null,
                        "titleIndivisible": null,
                        "subTitleDivisible": null
                    },
                    "medias": [],
                    "color": null,
                    "productionNationality": null,
                    "productionNationalityCode": [],
                    "productionYear": null,
                    "updateDate": null,
                    "creationDate": null,
                    "synopsis": "Surcharge données de base. The Artist",
                    "mediumSynopsis": null,
                    "longSynopsis": null,
                    "id": null,
                    "parentId": null,
                    "num": null,
                    "members": null,
                    "partners": null,
                    "tagsByType": null,
                    "totalEpisode": null,
                    "subObject": null,
                    "lang": "fr",
                    "version": null,
                    "awards": null,
                    "ratingCsa": null,
                    "data": null
                  },
                  "version": "20141215083759"
                }
              ],
              "paging": {
                "previous": null,
                "next": "http://127.0.0.1:8080/api/overloads/?limit=1&page=1&version=20141215083759",
                "nbElement": null
              }
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## By external id [/api/overloads/external/{providerId}/{assetId}]
Return the overload defined for the given external id

+ Parameters
    + providerId (required, string, `orange.com`) ... Number `providerId` the provider id
    + assetId (required, string, `KITDESU0143W0084780Z`) ... String `assetId` the asset id.

### Retrieve an overload [GET]
+ Response 200 (application/json)

    + Body

            {
              "providerId": "orange.com",
              "assetId": "THEARTISTXXW0058364Z",
              "contentId": 585877,
              "overload": {
                "titles": {},
                "synopsis": "Surcharge données de base. The 2",
                "lang": "fr"
              },
              "version": "20131215083759",
              "deleted": false
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## By content id [/api/overloads/edito/{contentId}]
Return the list of overload defined for the given content id

+ Parameters
    + contentId (required, biginteger, `585877`) ... Number `contentId` the content id

### Retrieve overloads [GET]
+ Response 200 (application/json)

    + Body

            {
              "data": [
              {
                "providerId": "orange.com",
                "assetId": "THEARTISTXXW0058364Z",
                "contentId": 585877,
                "overload": {
                  "titles": {},
                  "synopsis": "Surcharge données de base. The 2",
                  "lang": "fr"
                },
                "version": "20131215083759",
                "deleted": false
              }
            ],
              "paging": {
                "previous": null,
                "next": "http://127.0.0.1:8080/api/overloads/edito/123456?page=2"
              }
            }   

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## Manage overloads [/api/overloads/edito/{contentId}/{providerId}/{assetId}]

+ Parameters
    + id (required, number, `2798845`) ... Numeric `id` of the Content to perform action with.
    + providerId (required, string, `ATG`) ... String `providerId` representing the provider.
    + assetId (required, string, `serie_cat110340249`) ... String `assetId` representing the broadcast id.


### Add a new overload fo the given content [PUT]

Add an overload for the content.

+ Request (application/json)

    + Body

            {
                "providerId": "ATG",
                "assetId": "serie_cat110340248",
                "contentId": 4602933,
                "overload": {
                "titles": {},
                "synopsis": {},
                "lang": "fr",
                "data": {
                    "itemType": "season",
                    "id": "serie_cat110340248"
                },
                "version": "20150306132434",
                "deleted": false
            }

+ Response 201 (application/json)

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Add forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

### Delete an overload [DELETE]

Delete an overload for the content.

+ Response 200 (application/json)

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Detach forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Tag to attach (1) not found"
            }

# Group Search

This API provide search facilities

## Lists [/api/search/list?limit={limit}&page={page}]
Search for lists

+ Parameters
    + limit = `10` (optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page =`1` (optional, number, `2`) ... The page to be returned

### Get lists [GET]
+ Response 200 (application/json)

    + Body

            {
              "data": [
                {
                  "objectType": "LIST",
                  "contentType": "AUTRE",
                  "itemType": "SHOW",
                  "titles": {
                    "epgTitle": "Séries & fictions1",
                    "titleDivisible": "Séries & fictions1",
                    "subTitleDivisible": "Divertissement"
                  },
                  "synopsis": {},
                  "updateDate": "2015-02-05T09:48:10.000+0100",
                  "id": 4712800,
                  "lang": "fr",
                  "version": "20150205084810",
                  "ratingCSA": 4,
                  "duration": "0",
                  "boost": 1,
                  "data": {
                    "itemType": "list",
                    "id": "6Play_chaine_M6_Series&Fictions",
                    "revision": 1416850656184,
                    "title": "Séries & fictions1",
                    "creationDate": "2014-02-20",
                    "ratingCSA": 4,
                    "ageRange": 2,
                    "idKey": "6Play_chaine_M6_Series&Fictions",
                    "tags": [
                      {
                        "type": "CLASSIFICATION",
                        "name": "Csat_CornerChaine_M6",
                        "displayName": "Csat_CornerChaine_M6"
                      }
                    ],
                    "channel": {
                      "itemType": "externalChannel",
                      "id": "M6"
                    },
                    "maxResult": 2000,
                    "rules": [
                      {
                        "id": "10100006",
                        "itemType": "searchRule",
                        "maxResult": 2000,
                        "query": "tags_CLASSIFICATION:\\/6Play\\/Chaines\\/M6\\/6Play\\ \\-\\ Séries&Fictions* AND (itemType:movie OR itemType:serie OR itemType:season)"
                      }
                    ]
                  }
                }
              ],
              "paging": {
                "previous": "http://172.30.95.200:8080/api/search/list?Authorization=4ADD57713B2E8C2151C42E3D7D326&limit=1&page=1",
                "next": "http://172.30.95.200:8080/api/search/list?Authorization=4ADD57713B2E8C2151C42E3D7D326&limit=1&page=3"
              }
            }


# Group Bulk
In order to perform the same operation on multiple object we provide a Bulk API with these operations:

* See also
* Overload

## See also [/api/bulk/seealso]
Return the `seealso` information for the given list of `content id`.

### Get see also [POST]
Return the `seealso` for the given content id list. If a given content id is not found it will not appear in the response structure.

+ Request (application/json)

        [4431342,4431343]

+ Response 200 (application/json)


    + Body

            {
             "4431342": [
               4408701,
               2971485
             ],
             "4431343": [
               4408701,
               2971485
             ]
            }

## Overload [/api/overloads/bulk/external]
Return the `seealso` information for the given list of `content id`.

### Get overloads [POST]
Return the `overloads` for the given `content id` list. If a given content id is not found it will not appear in the
response structure.

+ Request (application/json)

    + Body

            [
               {
                   "providerId": "ATG",
                   "assetId": "serie_cat110340248"
               },
               {
                   "providerId": "ATG",
                   "assetId": "serie_cat110340249"
               }
            ]
    
+ Response 200 (application/json)

     + Body

            [
                {
                    "providerId": "ATG",
                    "assetId": "serie_cat110340248",
                    "contentId": 4602933,
                    "overload": {
                    "titles": {},
                    "synopsis": {},
                    "lang": "fr",
                    "data": {
                    "itemType": "season",
                    "id": "serie_cat110340248"
                },
                    "version": "20150306132434",
                    "deleted": false
                },
                {
                    "providerId": "ATG",
                    "assetId": "serie_cat110340249",
                    "contentId": 4602934,
                    "overload": {
                    "titles": {},
                    "synopsis": {},
                    "lang": "fr",
                    "data": {
                    "itemType": "season",
                    "id": "serie_cat110340248"
                },
                    "version": "20150306132435",
                    "deleted": false
                },
            ]

# Group Channel

The Channel API provides edito on channels. 
Channel are created by SIP+ who provide basic informations. Other user are allowed to update some basic field like `name` and `shortName`.

## Channel types list [/api/channels/types]

Retrieve channel types list

### Channel types list [GET]
+ Response 200 (application/json)

    + Body

            {
               "data": [
                   {
                       "id": 1,
                       "wording": "Chaîne",
                       "active": true
                   },
                   {
                       "id": 2,
                       "wording": "Radio",
                       "active": true
                   },
                   {
                       "id": 3,
                       "wording": "Chaîne événementielle",
                       "active": true
                   },
                   {
                       "id": 4,
                       "wording": "Chaîne technique",
                       "active": true
                   }
               ],
               paging: { }
            }

## Channels list [/api/channels?page={page}&limit={limit}]

Retrieve the `channels` list.

+ Parameters
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Channel list [GET]
+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "id": 416,
                        "name": "BE IN MAX 7",
                        "type": 1,
                        "definition": "SD",
                        "beginDate": "2013-06-25T10:42:08.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2013-07-11T16:59:59.000+0000",
                        "isMaster": true
                    },
                    {
                        "id": 417,
                        "name": "BE IN MAX 8",
                     a   "type": 1,
                        "definition": "SD",
                        "beginDate": "2013-06-25T10:42:08.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2013-07-11T16:59:59.000+0000",
                        "isMaster": true
                    },
                    {
                        "id": 418,
                        "name": "BE IN MAX 9",
                        "type": 1,
                        "definition": "SD",
                        "beginDate": "2013-06-25T10:42:08.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2013-07-11T16:59:59.000+0000",
                        "isMaster": true
                    },
                    {
                        "id": 380,
                        "name": "BE IN SPORTS 1",
                        "type": 1,
                        "definition": "SD",
                        "beginDate": "2013-06-25T00:00:00.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2014-03-13T00:00:00.000+0000",
                        "isMaster": true
                    },
                    {
                        "id": 381,
                        "name": "BE IN SPORTS 1 HD",
                        "type": 1,
                        "definition": "HD",
                        "beginDate": "2013-06-25T00:00:00.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2014-03-13T00:00:00.000+0000",
                        "isMaster": true,
                        "childs": [
                            382
                        ]
                    },
                    {
                        "id": 382,
                        "name": "BE IN SPORTS 1 HD DUPLI",
                        "type": 1,
                        "definition": "HD",
                        "beginDate": "2013-06-25T00:00:00.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2014-03-13T00:00:00.000+0000",
                        "master": 381,
                        "isMaster": false
                    },
                    {
                        "id": 383,
                        "name": "BE IN SPORTS 2",
                        "type": 1,
                        "definition": "SD",
                        "beginDate": "2013-06-25T00:00:00.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2015-02-24T00:00:00.000+0000",
                        "isMaster": true
                    },
                    {
                        "id": 384,
                        "name": "BE IN SPORTS 2 HD",
                        "type": 1,
                        "definition": "HD",
                        "beginDate": "2013-06-25T00:00:00.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2014-03-13T00:00:00.000+0000",
                        "isMaster": true,
                        "childs": [
                            385
                        ]
                    },
                    {
                        "id": 385,
                        "name": "BE IN SPORTS 2 HD DUPLI",
                        "type": 1,
                        "definition": "HD",
                        "beginDate": "2013-06-25T00:00:00.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2014-03-13T00:00:00.000+0000",
                        "master": 384,
                        "isMaster": false
                    },
                    {
                        "id": 98,
                        "name": "BEST OF SHOPPING",
                        "type": 1,
                        "definition": "SD",
                        "beginDate": "2013-06-25T10:42:08.000+0000",
                        "creationDate": "2013-06-25T10:42:08.000+0000",
                        "lastUpdate": "2013-07-11T16:59:59.000+0000",
                        "isMaster": true
                    }
                ],
                "paging": {
                    "next": "http://private-2812-bddpdedito.apiary-mock.com/api/channels?page=2"
                }
            }

## Channel [/api/channels/{id}]

When `id` is given, the operation target a single `channel` corresponding to this `id`.

+ Parameters
  + id (required, number, `56379`) ... Numeric `id` of the channel.

### Retrieve a channel [GET]

Return a single `channel` with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
                "id": 384,
                "name": "BE IN SPORTS 2 HD",
                "type": 1,
                "definition": "HD",
                "beginDate": "2013-06-25T00:00:00.000+0000",
                "creationDate": "2013-06-25T10:42:08.000+0000",
                "lastUpdate": "2014-03-13T00:00:00.000+0000",
                "isMaster": true,
                "childs": [
                    385
                ]
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Channel (1) not found"
            }

### Update a Channel [PUT]

Update or create a channel object.

+ Request (application/json)

    + Body

            {
                "id" : 943,
                "name": "FR3 VIA STELLA",
                "shortName" : "FR3",
                "type": 2,
                "definition":"HD",
                "beginDate":"2013-06-25T10:42:08.000+0000",
                "endDate": "2016-12-14T00:00:00.000+0100",
                "master": 345
            }

+ Response 200 (application/json)

+ Response 201 (application/json)

+ Response 400 (application/json)

    + Body

            {
              "errorCode": "400",
              "message": "The field 'name' should not be empty."
            }


+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Add forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## Media list [/api/channels/{id}/media?page={page}&limit={limit}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the channel.
  + limit = `10` (optional, number, `10`) ... The number of elements retuned limit (max 300)
  + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve media list for a channel [GET]

Retrieve the `media list` for a `channel` with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "type": "IMAGE",
                        "height": 40,
                        "width": 122,
                        "format": "image/png",
                        "name": "CHNNB_416_20121029.png",
                        "imgType": "CHNNB",
                        "rank": 1,
                        "id": 396268,
                        "validityDate": "2012-10-29T00:00:00.000+0000",
                        "updateDate": "2015-01-16T08:05:08.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHNNB"
                    },
                    {
                        "type": "IMAGE",
                        "height": 40,
                        "width": 122,
                        "format": "image/png",
                        "name": "CHNNB_416_20121122.png",
                        "imgType": "CHNNB",
                        "rank": 1,
                        "id": 533445,
                        "validityDate": "2012-11-22T00:00:00.000+0000",
                        "updateDate": "2015-01-16T08:05:08.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHNNB"
                    },
                    {
                        "type": "IMAGE",
                        "height": 480,
                        "width": 640,
                        "format": "image/png",
                        "name": "CHN43FN_416_20130826.png",
                        "imgType": "CHN43FN",
                        "rank": 1,
                        "id": 2953336,
                        "validityDate": "2013-08-26T00:00:00.000+0000",
                        "updateDate": "2015-03-11T08:03:44.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHN43FN"
                    },
                    {
                        "type": "IMAGE",
                        "height": 480,
                        "width": 640,
                        "format": "image/png",
                        "name": "CHN43FB_416_20130826.png",
                        "imgType": "CHN43FB",
                        "rank": 1,
                        "id": 2951403,
                        "validityDate": "2013-08-26T00:00:00.000+0000",
                        "updateDate": "2015-03-11T08:01:57.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHN43FB"
                    },
                    {
                        "type": "IMAGE",
                        "height": 480,
                        "width": 640,
                        "format": "image/png",
                        "name": "CHN43FB_416_20131219.png",
                        "imgType": "CHN43FB",
                        "rank": 1,
                        "id": 5409352,
                        "validityDate": "2013-12-19T00:00:00.000+0000",
                        "updateDate": "2015-03-11T08:01:57.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHN43FB"
                    },
                    {
                        "type": "IMAGE",
                        "height": 165,
                        "width": 440,
                        "format": "image/png",
                        "name": "CHNERR_416_20121029.png",
                        "imgType": "CHNERR",
                        "rank": 1,
                        "id": 394726,
                        "validityDate": "2012-10-29T00:00:00.000+0000",
                        "updateDate": "2015-01-16T08:04:28.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHNERR"
                    },
                    {
                        "type": "IMAGE",
                        "height": 165,
                        "width": 440,
                        "format": "image/png",
                        "name": "CHNERR_416_20121122.png",
                        "imgType": "CHNERR",
                        "rank": 1,
                        "id": 531691,
                        "validityDate": "2012-11-22T00:00:00.000+0000",
                        "updateDate": "2015-01-16T08:04:28.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHNERR"
                    },
                    {
                        "type": "IMAGE",
                        "height": 72,
                        "width": 106,
                        "format": "image/png",
                        "name": "CHNMOS_416_20121122.png",
                        "imgType": "CHNMOS",
                        "rank": 1,
                        "id": 532618,
                        "validityDate": "2012-11-22T00:00:00.000+0000",
                        "updateDate": "2015-01-16T08:04:53.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHNMOS"
                    },
                    {
                        "type": "IMAGE",
                        "height": 72,
                        "width": 106,
                        "format": "image/png",
                        "name": "CHNMOS_416_20121029.png",
                        "imgType": "CHNMOS",
                        "rank": 1,
                        "id": 395532,
                        "validityDate": "2012-10-29T00:00:00.000+0000",
                        "updateDate": "2015-01-16T08:04:53.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHNMOS"
                    },
                    {
                        "type": "IMAGE",
                        "height": 72,
                        "width": 106,
                        "format": "image/png",
                        "name": "CHNMOS_416_20121107.png",
                        "imgType": "CHNMOS",
                        "rank": 1,
                        "id": 532564,
                        "validityDate": "2012-11-07T00:00:00.000+0000",
                        "updateDate": "2015-01-16T08:04:53.000+0000",
                        "url": "http://172.31.77.77:80/ServiceImage/ImageChaine?idchn=416&type=CHNMOS"
                    }
                ],
                "paging": {
                    "next": "http://private-2812-bddpdedito.apiary-mock.com/api/channels/416/media?Access-Token=4ADD57713B2E8C2151C42E3D7D326&page=2"
                }
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Channel (1) not found"
            }

## Media [/api/channels/{channelId}/media/{mediaId}]

+ Parameters
  + channelId (required, number, `1`) ... Numeric `id` of the channel.
  + mediaId (required, number, `1`) ... Numeric `id` of the media.

### Retrieve a channel media [GET]

Retrieve the `mediaId` for a `channel` with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
              "type": "IMAGE",
              "height": 272,
              "width": 352,
              "format": "image/jpeg",
              "name": "STD_298296.jpg",
              "imgType": "STD",
              "rank": 1,
              "id": 191281,
              "validityDate": "2012-09-10T21:44:25.000+0000",
              "updateDate": "2012-09-10T21:44:25.000+0000",
              "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
            }


+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }
        
### Attach a media to a channel / Update it if existing [PUT]

+ Request (application/json)

    + Body

            {
              "imgType": "CPLAY",
              "rank" : 2,
              "validityDate":"2013-06-25T10:42:08.000+0000"
            }

+ Response 200 (application/json)

    + Body

            {
              "imgType": "STD",
              "rank": 1,
              "validityDate": "2012-09-10T21:44:25.000+0000"
            }

+ Response 201 (application/json)

+ Response 400 (application/json)

    + Body

            {
              "errorCode": "400",
              "message": "The field 'imgType' should not be empty."
            }

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Add forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Channel (1) not found"
            }

### Remove a media from the channel [DELETE]

+ Response 200 (application/json)

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Delete forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Channel (1) not found"
            }

# Group Partner

Provide partner identity information.

## Partner [/api/partners/{id}]

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the partner.

### Retrieve a partner [GET]

Retrieve information for a `partners` with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
              "id" : 1,
              "name" : "CANAL+",
              "enabled" : true,
              "updateDate" : "2015-01-19T20:18:12.000+0100"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Partner (1) not found"
            }

# Group Jobs

Provide jobs information.

## List [/api/jobs?page={page}&limit={limit}]

Return the list of jobs.

+ Parameters
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve jobs list [GET]

Retrieve the list of available `jobs`.

+ Response 200 (application/json)

    + Body

            {
               "data":[
                  {
                    "id": 1,
                    "name": "Invité",
                    "rank": 10,
                    "prefix": "Invités : ",
                    "updateDate": "2015-01-19T20:18:12.000+0100"
                  },
                  {
                    "id": 2,
                    "name": "Acteur",
                    "rank": 12,
                    "prefix": "Avec : ",
                    "updateDate": "2015-01-19T20:18:12.000+0100"
                  }
                ],
                "paging": {
                    "previous": null,
                    "next": "http://127.0.0.1:8080/api/jobs?page=2"
                }
            }

## Job [/api/jobs/{id}]

Retrieve a `jobs` with a specific `id`.

+ Parameters
  + id (required, number, `1`) ... Numeric `id` of the job.

### Retrieve a job from its id [GET]
+ Response 200 (application/json)

    + Body

            {
              "id": 1,
              "name": "Invité",
              "rank": 10,
              "prefix": "Invités : ",
              "updateDate": "2015-01-19T20:18:12.000+0100"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Jobs (1) not found"
            }

# Group Tags

A tag is used to define a common characteristic. We provide 5 types of tags:

* GENRE_CANAL
* SOUS_GENRE_CANAL
* EDUCATION
* MOTCLE
* TAG

## Types list [/api/tags/?limit={limit}&page={page}]

+ Parameters
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned
    
### Retrieve tag types [GET]

Retrieve the list of available `tags` types.

+ Response 200 (application/json)

    + Body

            {
              "data": [
                {
                  "type": "GENRE_CANAL"
                },
                {
                  "type": "SOUS_GENRE_CANAL"
                },
                {
                  "type": "EDUCATION"
                },
                {
                  "type": "MOTCLE"
                },
                {
                  "type": "TAG"
                }
              ],
              "paging": {
                "previous": null,
                "next": "http://127.0.0.1:8080/api/tags?page=2"
              }
            }

## Tags list [/api/tags/{type}?page={page}&limit={limit}]

Return the list of tags for the given type.

+ Parameters
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve tags for a type [GET]

Retrieve the list of available `tags` for a specific `type`.

+ Response 200 (application/json)

    + Body

            {
              "data": [
                {
                  "id": 1,
                  "label": "Cinéma"
                },
                {
                  "id": 2,
                  "label": "Documentaire"
                }
              ],
              "paging": {
                "next": "http://127.0.0.1:8080/api/tags/GENRE?page=2"
              }
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Tags (1) not found"
            }

### Add a tag [POST]

Add a new tag. Only for EDUCATION and MOTCLE.
For H:API Outil Auteur, we only use the **MOTCLE** type.

+ Request (application/json)

    + Body

            {
              "label": "Cinéma"
            }

+ Response 201 (application/json)

  + Headers

            Location: /api/tags/EDUCATION/69

+ Response 400 (application/json)

    + Body

            {
              "errorCode": "400",
              "message": "The field 'label' should not be empty."
            }

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Add forbidden"
            }

## Tag [/api/tags/{type}/{id}]

Manage the specified tag.

### Retrieve a tag [GET]
+ Response 200 (application/json)

    + Body

            {
              "id": 1,
              "label": "Cinéma"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## Sub tags [/api/tags/{type}/{id}/children?page={page}&limit={limit}]

Return the sub tags

+ Parameters
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Return the sub tags [GET]

+ Response 200 (application/json)

    + Body

            {
               "data":[
                    {
                        "id": 1,
                        "name": "Film Action",
                        "rank": 1,
                        "filter": "FILM ACTION-AVENTURE",
                        "updateDate": "2015-01-19T20:18:12.000+0100"
                    },
                    {
                        "id": 2,
                        "name": "Film Aventure",
                        "rank": 3,
                        "filter": "FILM ACTION-AVENTURE",
                        "updateDate": "2015-01-19T20:18:12.000+0100"
                    }
                ],
                "paging": {
                    "next": "http://127.0.0.1:8080/api/tags/{type}/{id}/childs?page=2"
                }
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

# Group People

Every human being in the world can be found using this API. Yes you too!

## List [/api/people?page={page}&limit={limit}]

Return the list of people.

+ Parameters
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve events [GET]
+ Response 200 (application/json)

    + Body

            {
              "data" : [ {
                "lastName" : "lastName",
                "firstName" : "firstName",
                "id" : 1
              } ],
              "paging" : {
                "next" : "http://localhost:9998/people?page=2"
              }
            }

## People [/api/people/{id}]

Return the specified people detail.

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the people.

### Retrieve events [GET]

Retrieve information of `people` with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
              "lastName" : "lastName",
              "firstName" : "firstName",
              "id" : 1
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "People (1) not found"
            }

# Group Media

A media is a image or a video that can be linked with people, content, channels... A media can exist without the need to be linked to a people or a content...
Each object that accept media provide a `/media/{mediaId}` method used to link or unlink the object and a media

## Media [/api/media?page={page}&limit={limit}]

Return the list of media. A media could be an `IMAGE` or a `VIDEO`. 
The exposed url should be used to retrieve the content.

Provided image type are :

|   imgType    |
|--------------|
| CARWEB       |
| STD          |
| STD169       |
| MEASOIR      |
| MEAVOD       |
| PIVOT        |
| BA           |
| CPLAY        |
| MEANL        |
| MEAEUREKA    |

+ Parameters
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve media list [GET]

Retrieve the list of `media`.

+ Response 200 (application/json)

    + Body

            {
              "data": [
                {
                  "type": "IMAGE",
                  "height": 272,
                  "width": 352,
                  "format": "image/jpeg",
                  "name": "STD_298296.jpg",
                  "imgType": "STD",
                  "rank": 1,
                  "id": 191281,
                  "updateDate": "2012-09-10T21:44:25.000+0000",
                  "url" : "http://127.0.0.1/images/40420/2013-12-26T08:05:32Z.jpg"
                },
                {
                  "type": "IMAGE",
                  "height": 272,
                  "width": 352,
                  "format": "image/jpeg",
                  "name": "STD_298296.jpg",
                  "imgType": "STD",
                  "rank": 1,
                  "id": 191281,
                  "updateDate": "2012-09-10T21:44:25.000+0000",
                  "url" : "http://127.0.0.1/api/media/191281/file/2013-12-26T08:05:32Z.jpg"
                }
              ],
              "paging": {
                "previous": null,
                "next": "http://127.0.0.1:8080/api/media/?page=2"
              }
            }

### Add media [POST]

+ Request (application/json)

    + Body

            {
              "type": "IMAGE",
              "height": 272,
              "width": 352,
              "format": "image/jpeg",
              "name": "STD_298296.jpg",
              "imgType": "STD",
              "rank": 1,
              "id": 191281,
              "updateDate": "2012-09-10T21:44:25.000+0000",
              "url" : "http://127.0.0.1/api/media/191281/file/2013-12-26T08:05:32Z.jpg"
            }

+ Response 201 (application/json)

  + Headers

            Location: /api/media/2

+ Response 400 (application/json)

    + Body

            {
              "errorCode": "400",
              "message": "The field 'name' should not be empty."
            }

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Add forbidden"
            }

## Media [/api/media/{id}]

Bring media update capacities

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the media.

### Retrieve media [GET]

Retrieve information of a `media` with a specific `id`.

+ Response 200 (application/json)

    + Body

            {
              "type": "IMAGE",
              "height": 272,
              "width": 352,
              "format": "image/jpeg",
              "name": "STD_298296.jpg",
              "imgType": "STD",
              "rank": 1,
              "id": 191281,
              "updateDate": "2012-09-10T21:44:25.000+0000",
              "url" : "http://127.0.0.1/api/media/191281/file/2013-12-26T08:05:32Z.jpg"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Media (1) not found"
            }

### Delete media [DELETE]

A media can by deleted only if there is no existing link with an object.

+ Response 200 (application/json)

+ Response 403 (application/json)

    + Body

            {
              "errorCode": "403",
              "message": "Delete forbidden"
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Media (1) not found"
            }

## Media file [/api/media/{id}/file]

Requirements :
- Maximum upload file size : 20 Mb
- Accepted media MIME types: no limitation on media type

The HTTP headers to use when making a simple upload request include:
- `Content-Type` : Set to one of the method's accepted upload media data types, specified in the API reference.
- `Content-Length` : Set to the number of bytes you are uploading.

The media file can be retrieved or uploaded using these methods

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the media.

### Get media file [GET]

+ Response 200 (application/json)

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Media (1) not found"
            }

### Upload media file [PUT]

+ Response 201 (application/json)

+ Response 204 (application/json)

# Group Events

An event represent a situation in with a list of content can be linked. It can be a academy awards, a music festival, a sport competition, ...

## Events [/api/events?page={page}&limit={limit}]

Return the list of events. An event could be a music festival, academy awards, ...

+ Parameters
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve events [GET]

Retrieve the `events` list.

+ Response 200 (application/json)

    + Body

            {
              "data": [
                {
                  "id": 10,
                  "name": "Oscars",
                  "country": "Etats-Unis",
                  "countryCode" : "US"
                },
                {
                  "id": 7,
                  "name": "César",
                  "country": "France",
                  "countryCode" : "FR"
                }
              ],
              "paging": {
                "previous": null,
                "next": "http://127.0.0.1:8080/api/events/?page=2"
              }
            }
            
## Events date [/api/events/{eventId}?page={page}&limit={limit}]

Return the list of event occurence date (year).

+ Parameters
    + eventId (required, number, `1`) ... Numeric `id` of the event.
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve happening date [GET]

Retrieve the list of event occurence date for an `eventId`.

+ Response 200 (application/json)

    + Body

            {
              "data": [
                {
                  "year": 2010
                },
                {
                  "year": 2011
                }
              ],
              "paging": {
                "previous": null,
                "next": "http://127.0.0.1:8080/api/events/{eventId}?page=2"
              }
            }

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Event (1) not found"
            }
        
## Event rewards [/api/events/{eventId}/{year}/rewards?page={page}&limit={limit}]

Return the list of rewards delivered for an event.

+ Parameters
    + eventId (required, number, `1`) ... Numeric `id` of the event.
    + year (required, number, `2011`) ... Numeric `id` of the year.
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve event rewards [GET]

Return the list of rewards delivered for an `eventId` and for an `year`.

+ Response 200 (application/json)

    + Body

             {
               "data": [
                 {
                     "id": 3,
                     "name": "César du meilleur film",
                 },
                 {
                     "id": 4,
                     "name": "César du meilleur acteur",
                 }
               ],
               "paging": {
                 "previous": null,
                 "next": "http://127.0.0.1:8080/api/events/{eventId}/{year}/rewards"
               }
             }        

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

## Rewarded contents [/api/events/{eventId}/{year}/rewards/{rewardId}?page={page}&limit={limit}]

Return the list of contents rewarded for an event.

+ Parameters
    + eventId (required, number, `1`) ... Numeric `id` of the event.
    + year (required, number, `2011`) ... Numeric `id` of the year.
    + rewardId (required, number, `1`) ... Numeric `id` of the reward.
    + limit = `10 `(optional, number, `10`) ... The number of elements retuned limit (max 300)
    + page = `1` (optional, number, `2`) ... The page to be returned

### Retrieve events [GET]

Return the list of rewarded contents for an `eventId` and for an `year`.

+ Response 200 (application/json)

    + Body

            [
              {
                "objectType": "UNIT",
                "contentType": "SHOW",
                "itemType": "movie",
                "titles": {
                  "originalTitle": "The Artist",
                  "epgTitle": "The Artist",
                  "titleDivisible": "The Artist",
                  "subTitleDivisible": "Film Comédie dramatique"
                },
                "synopsis": {
                  "small": "En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
                  "medium": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
                  "large": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
                },
                "color": "0",
                "productionNationality": "France - Belgique",
                "productionYear": "2011",
                "updateDate": "2014-12-08T20:12:08.000+0000",
                "id": 585877,
                "num": 1,
                "lang": "fr",
                "version": "20141208201208",
                "ratingCSA": 1,
                "ageRange": 2,
                "duration": "100",
                "boost": 32715,
                "diffusionDate": "2012-10-05T18:55:00.000+0000"
              },
              {
                "objectType": "UNIT",
                "contentType": "SHOW",
                "itemType": "movie",
                "titles": {
                  "originalTitle": "The Artist",
                  "epgTitle": "The Artist",
                  "titleDivisible": "The Artist",
                  "subTitleDivisible": "Film Comédie dramatique"
                },
                "synopsis": {
                  "small": "En 1927, un acteur, vedette du cinéma muet, sombre dans l'oubli avec l'arrivée du parlant et assiste à l'ascension irrésistible d'une ancienne figurante.",
                  "medium": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma muet, mais l'irruption du parlant va mettre un terme brutal à sa carrière. L'acteur ne tourne plus et sombre dans l'oubli. A l'inverse, Peppy Miller, une jeune figurante, devient la nouvelle étoile de Hollywood...",
                  "large": "A Hollywood, en 1927, George Valentin compte parmi les plus grandes vedettes du cinéma, et sa célébrité n'a d'égal que son orgueil. Son producteur, Al Zimmer, l'invite à la projection de son dernier film, à la sortie duquel il croise Peppy Miller, une comédienne débutante. La jeune femme devient figurante dans un long métrage en tournage aux côtés de George. Les deux acteurs se plaisent aussitôt, mais George refuse de s'engager. C'est alors que le parlant fait son apparition. George, persuadé que cette technologie est sans avenir, va jusqu'à se séparer d'Al pour produire un film muet. Parallèlement, Peppy devient la nouvelle égérie du studio..."
                },
                "color": "0",
                "productionNationality": "France - Belgique",
                "productionYear": "2011",
                "updateDate": "2014-12-08T20:12:08.000+0000",
                "id": 585878,
                "num": 1,
                "lang": "fr",
                "version": "20141208201208",
                "ratingCSA": 1,
                "ageRange": 2,
                "duration": "100",
                "boost": 32715,
                "diffusionDate": "2012-10-05T18:55:00.000+0000"
              }
            ]

+ Response 404 (application/json)

    + Body

            {
              "errorCode": "404",
              "message": "Content (1) not found"
            }

# Group API Status

This API provides basic monitoring status

## Status [/api/_status]

Basic health check

### Retrieve status [GET]
+ Response 200 (application/json)

    + Body


            {
              "version": "1.0.3-SNAPSHOT 2015/04/15 01:34:15 PM,UTC",
              "dbVersion": "1.16.22",
              "dbOk": true,
              "processorsOk": true,
              "globalStatus": true,
              "serverName": "frcp03vdv0274"
            }